<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIStudio.Service</name>
    </assembly>
    <members>
        <member name="M:AIStudio.Service.AppClient.DataProvider.Query``1(System.Collections.Generic.ICollection{System.String},System.String,System.Object[],AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            查询
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="columns">需要返回的列字段，如果需要返回全部请设置null</param>
            <param name="condition">where条件，不带where，例如id = @0，参数使用@0，@1，@2，@3...</param>
            <param name="args">对应的参数列表new object[] { guid }</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{System.String},AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            创建,column如果没有，那么不会返回,主要为了返回自增长主键，或者是否需要时间戳
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="objs">要插入的T对象列表，逐渐如果是自增长则不必设置</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.Modify``1(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{``0},AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            更新
            </summary>
            <typeparam name="T">类型</typeparam>
            /// <param name="columns">需要更新的列字段，如果需要全部更新请设置null</param>
            <param name="objs">要更新的T对象列表</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.Delete``1(System.String,System.Collections.Generic.ICollection{System.Object},AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            删除
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="primaryKeyColumn">类型的主键，目前系统都是id</param>
            <param name="ids">需要删除的id列表</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.ComplexOperation(System.Collections.Generic.IDictionary{System.String,System.Tuple{System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.Object}}},System.Collections.Generic.IDictionary{System.String,System.Tuple{System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.Object}}},System.Collections.Generic.IDictionary{System.String,System.Tuple{System.String,System.Collections.Generic.ICollection{System.Object}}},AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            复合操作,返回的是Add的类的json格式，自己解吧
            </summary>
            <param name="addObjs">需要添加的对象，Key是类名</param>
            <param name="modifyObjs">需要更新的对象，Key是类名</param>
            <param name="deleteObjs">需要删除的对象，Key是类名</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.ComplexQuery(System.Collections.Generic.ICollection{AIStudio.Service.AppClient.Models.ComplexQuery},AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            复合查询
            </summary>
            <param name="queries">需要查询的表列表以及相关参数</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.QueryWithCustomSQL``1(System.String,System.Object[],AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            通用SQL查询数据，这个接口不规范，只有在使用常规接口无法实现功能的情况下才使用，请勿滥用
            </summary>
            <typeparam name="T">结果表对象</typeparam>
            <param name="sql">查询完整SQL语句</param>
            <param name="args">条件参数</param>
            <param name="fromMaster">是否从Master库查询数据，默认是false</param>
            <returns>结果集合</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.UploadFile(System.String,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="remark"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.DataProvider.DownLoadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fullpath"></param>
            <param name="savepath"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.AppClient.HttpClients.AppSecretHeader">
            <summary>
            密匙App
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.AppSecretHeader.#ctor(System.String,System.String)">
            <summary>
            根据AppId与appSecret来访问服务
            </summary>
            <param name="appId"></param>
            <param name="appSecret"></param>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.AppSecretHeader.SetHeader">
            <summary>
            设置Header信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.AppClient.HttpClients.HttpClientHelper">
            <summary>
            客户端获取Api
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.HttpClientHelper.PostAsyncJson(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            使用post方法异步请求
            </summary>
            <param name="url">目标链接</param>
            <param name="json">发送的参数字符串，只能用json</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.HttpClientHelper.PostAsync(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            使用post方法异步请求
            </summary>
            <param name="url">目标链接</param>
            <param name="data">发送的参数字符串</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.HttpClientHelper.PostAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            使用post方法异步请求
            </summary>
            <param name="url">目标链接</param>
            <param name="data">发送的参数字符串</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.HttpClientHelper.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            使用get方法异步请求
            </summary>
            <param name="url">目标链接</param>
            <returns>返回的字符串</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.HttpClientHelper.PostObjectAsync``2(System.String,``1)">
            <summary>
            使用post返回异步请求直接返回对象
            </summary>
            <typeparam name="T">返回对象类型</typeparam>
            <typeparam name="T2">请求对象类型</typeparam>
            <param name="url">请求链接</param>
            <param name="obj">请求对象数据</param>
            <returns>请求返回的目标对象</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.HttpClients.HttpClientHelper.GetObjectAsync``1(System.String)">
            <summary>
            使用Get返回异步请求直接返回对象
            </summary>
            <typeparam name="T">请求对象类型</typeparam>
            <param name="url">请求链接</param>
            <returns>返回请求的对象</returns>
        </member>
        <member name="T:AIStudio.Service.AppClient.Models.CompressionHelper">
            <summary>
            使用 SharpZipLib 进行压缩的辅助类，简化对字节数组和字符串进行压缩的操作。
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.Compress(System.Byte[],AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从原始字节数组生成已压缩的字节数组。
            </summary>
            <param name="bytesToCompress">原始字节数组。</param>
            <returns>返回已压缩的字节数组</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.Compress(System.String,AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从原始字符串生成已压缩的字符串。
            </summary>
            <param name="stringToCompress">原始字符串。</param>
            <returns>返回已压缩的字符串。</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.CompressToByte(System.String,AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从原始字符串生成已压缩的字节数组。
            </summary>
            <param name="stringToCompress">原始字符串。</param>
            <param name="compressionProvider"></param>
            <returns>返回已压缩的字节数组。</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.DeCompress(System.String,AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从已压缩的字符串生成原始字符串。
            </summary>
            <param name="stringToDecompress">已压缩的字符串。</param>
            <returns>返回原始字符串。</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.DeCompress(System.Byte[],AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从已压缩的字节数组生成原始字节数组。
            </summary>
            <param name="bytesToDecompress">已压缩的字节数组。</param>
            <returns>返回原始字节数组。</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.OutputStream(System.IO.Stream,AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从给定的流生成压缩输出流。
            </summary>
            <param name="inputStream">原始流。</param>
            <returns>返回压缩输出流。</returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.Models.CompressionHelper.InputStream(System.IO.Stream,AIStudio.Service.AppClient.Models.CompressionType)">
            <summary>
            从给定的流生成压缩输入流。
            </summary>
            <param name="inputStream">原始流。</param>
            <returns>返回压缩输入流。</returns>
        </member>
        <member name="F:AIStudio.Service.AppClient.Models.CompressionType.GZip">
            <summary>
            GZip 压缩格式
            </summary>
        </member>
        <member name="F:AIStudio.Service.AppClient.Models.CompressionType.BZip2">
            <summary>
            BZip2 压缩格式
            </summary>
        </member>
        <member name="F:AIStudio.Service.AppClient.Models.CompressionType.Zip">
            <summary>
            Zip 压缩格式
            </summary>
        </member>
        <member name="T:AIStudio.Service.AppClient.Models.JsonPropertyContractResolver">
            <summary>
            Json分解器
            </summary>
        </member>
        <member name="T:AIStudio.Service.AppClient.Models.WebMessageType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:AIStudio.Service.AppClient.Models.WebMessageType.QueryWithCustomSQLRequest">
            <summary>
            直接使用SQL语句查询数据，这个接口不规范，只有在使用常规接口无法实现功能的情况下才使用，请勿滥用
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse`1.IsOK">
            <summary>
            请求是否OK
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse`1.ErrorType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse`1.ErrorMessage">
            <summary>
            IsOK = false时错误信息
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse`1.ResponseItem">
            <summary>
            仅Query类返回
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse.IsOK">
            <summary>
            请求是否OK
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse.ErrorType">
            <summary>
            错误类型
            </summary>
        </member>
        <member name="P:AIStudio.Service.AppClient.Models.WebResponse.ErrorMessage">
            <summary>
            IsOK = false时错误信息
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.NetworkTransfer.GetToken">
            <summary>
            获取token
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.NetworkTransfer.DownLoadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fullpath"></param>
            <param name="savepath"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.AppClient.ProcessMessages.AbstractProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.AbstractProcessor.CheckReload(System.String)">
            <summary>
            
            </summary>
            <param name="tableType"></param>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.AbstractProcessor.DoResponse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AIStudio.Service.AppClient.ProcessMessages.AbstractProcessor.Types">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.AppClient.ProcessMessages.AbstractProcessor.IBusinessTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIStudio.Service.AppClient.ProcessMessages.AddMessageProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.AddMessageProcessor.#ctor(AIStudio.Service.AppClient.Models.AppMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.AddMessageProcessor.DoResponse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.AddMessageProcessor.ProcessData(System.String,System.Collections.IList,System.Collections.Generic.ICollection{System.String})">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="objs"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.AppClient.ProcessMessages.ComplexOperationMessageProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.ComplexOperationMessageProcessor.#ctor(AIStudio.Service.AppClient.Models.AppMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.ComplexOperationMessageProcessor.DoResponse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.AppClient.ProcessMessages.ComplexQueryMessageProcessor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.AppClient.ProcessMessages.ComplexQueryMessageProcessor.#ctor(AIStudio.Service.AppClient.Models.AppMessage)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:AIStudio.Service.Quartz.GlobalJob.AllTypes">
            <summary>
            框架所有自定义类
            </summary>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.UseQuartz(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            初始化作业
            </summary>
            <param name="applicationBuilder"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.GetJobs(Quartz.ISchedulerFactory)">
            <summary>
            获取所有的作业
            </summary>
            <param name="schedulerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.AddJob(Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO,Quartz.ISchedulerFactory,System.Boolean)">
            <summary>
            添加作业
            </summary>
            <param name="taskOptions"></param>
            <param name="schedulerFactory"></param>
            <param name="init">是否初始化,否=需要重新生成配置文件，是=不重新生成配置文件</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.Remove(Quartz.ISchedulerFactory,Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO)">
            <summary>
            移除作业
            </summary>
            <param name="schedulerFactory"></param>
            <param name="taskOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.Update(Quartz.ISchedulerFactory,Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO)">
            <summary>
            更新作业
            </summary>
            <param name="schedulerFactory"></param>
            <param name="taskOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.Pause(Quartz.ISchedulerFactory,Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO)">
            <summary>
            暂停作业
            </summary>
            <param name="schedulerFactory"></param>
            <param name="taskOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.Start(Quartz.ISchedulerFactory,Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO)">
            <summary>
            启动作业
            </summary>
            <param name="schedulerFactory"></param>
            <param name="taskOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.Run(Quartz.ISchedulerFactory,Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO)">
            <summary>
            立即执行一次作业
            </summary>
            <param name="schedulerFactory"></param>
            <param name="taskOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.TriggerAction(Quartz.ISchedulerFactory,System.String,System.String,AIStudio.Service.Quartz.JobAction,Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO)">
            <summary>
            触发新增、删除、修改、暂停、启用、立即执行事件
            </summary>
            <param name="schedulerFactory"></param>
            <param name="taskName"></param>
            <param name="groupName"></param>
            <param name="action"></param>
            <param name="taskOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.GetTaskOptions(Quartz.IJobExecutionContext)">
            <summary>
            
            </summary>
            <param name="context"></param>通过作业上下文获取作业对应的配置参数
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.Quartz.QuartzNETExtension.Exists(Coldairarrow.Business.Quartz_Manage.Quartz_TaskDTO,System.Boolean)">
            <summary>
            作业是否存在
            </summary>
            <param name="taskOptions"></param>
            <param name="init">初始化的不需要判断</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.Quartz.JobAction">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.新增">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.删除">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.修改">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.暂停">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.停止">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.开启">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Service.Quartz.JobAction.立即执行">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.Add(AIStudio.Service.WebSocketEx.CustomWebSocket)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.Remove(AIStudio.Service.WebSocketEx.CustomWebSocket)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.All">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.Others(AIStudio.Service.WebSocketEx.CustomWebSocket)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.Client(System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.GetSmallAssistant">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.ICustomWebSocketFactory.AllWithAssistant">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WebSocketEx.CustomWebSocketFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.Add(AIStudio.Service.WebSocketEx.CustomWebSocket)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.Remove(AIStudio.Service.WebSocketEx.CustomWebSocket)">
            <summary>
            
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.All">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.Others(AIStudio.Service.WebSocketEx.CustomWebSocket)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.Client(System.String)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.GetSmallAssistant">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WebSocketEx.CustomWebSocketFactory.AllWithAssistant">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.IEndStep">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OABaseStep">
            <summary>
            基类
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OABaseStep.RunAsync(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OACOBeginStep">
            <summary>
            并行开始
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OACOBeginStep.Run(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OACOEndStep">
            <summary>
            并行结束
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OACOEndStep.RunAsync(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OADecideStep">
            <summary>
            条件分支
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OADecideStep.Run(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OAEndStep">
            <summary>
            终止节点
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAEndStep.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAEndStep.RunAsync(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OAExtension">
            <summary>
            扩展方法
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAExtension.InitOAData(System.String,System.String)">
            <summary>
            初始化数据
            </summary>
            <param name="json"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAExtension.GetNextStep(System.Collections.Generic.List{Coldairarrow.Util.OAStep},System.String)">
            <summary>
            获取下一个节点
            </summary>
            <param name="oASteps"></param>
            <param name="nextstepid"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAExtension.NameToType(System.String)">
            <summary>
            名字转化成节点
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAExtension.InitOAStep(Coldairarrow.Business.OA_Manage.OA_UserFormDTO)">
            <summary>
            初始化步骤
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OAMiddleStep">
            <summary>
            中间节点
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAMiddleStep.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAMiddleStep.RunAsync(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OANormalStep">
            <summary>
            普通节点，不带审批
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OANormalStep.Run(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OANormalStep.GetStep(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            获取步骤
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.OAStartStep">
            <summary>
            开始节点
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAStartStep.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.OAStartStep.RunAsync(WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            节点触发
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Service.WorkflowCore.WorkflowExtension">
            <summary>
            工作流
            </summary>
        </member>
        <member name="M:AIStudio.Service.WorkflowCore.WorkflowExtension.UseWorkflow(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            初始化工作流
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
    </members>
</doc>
