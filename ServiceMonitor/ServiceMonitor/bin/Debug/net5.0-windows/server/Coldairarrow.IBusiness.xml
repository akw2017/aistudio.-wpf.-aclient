<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Coldairarrow.IBusiness</name>
    </assembly>
    <members>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.InsertAsync(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.InsertAsync(System.Collections.Generic.List{`0})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.InsertAsync(System.Collections.Generic.List{System.Object})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.BulkInsert(System.Collections.Generic.List{`0})">
            <summary>
            批量添加数据,速度快
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAll">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAllAsync">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Delete(System.String)">
            <summary>
            删除指定主键数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAsync(System.String)">
            <summary>
            删除指定主键数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            通过主键删除多条数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAsync(System.Collections.Generic.List{System.String})">
            <summary>
            通过主键删除多条数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Delete(`0)">
            <summary>
            删除单条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAsync(`0)">
            <summary>
            删除单条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAsync(System.Collections.Generic.List{`0})">
            <summary>
            删除多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件数据
            </summary>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件数据
            </summary>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteSql(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=&gt;x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">条件</param>
            <returns>
            影响条数
            </returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.DeleteSqlAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=&gt;x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">条件</param>
            <returns>
            影响条数
            </returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.UpdateAsync(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.UpdateAsync(System.Collections.Generic.List{`0})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.UpdateAsync(System.Collections.Generic.List{System.Object})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            指定条件更新
            </summary>
            <param name="whereExpre">筛选表达式</param>
            <param name="set">更改属性回调</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            指定条件更新
            </summary>
            <param name="whereExpre">筛选表达式</param>
            <param name="set">更改属性回调</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.UpdateSql(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.UpdateSqlAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式条件获取单个实体
            </summary>
            <param name="predicate">lambda表达式条件</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式条件获取单个实体
            </summary>
            <param name="predicate">lambda表达式条件</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.GetEntity(System.Object[])">
            <summary>
            获取实体
            </summary>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.GetEntityAsync(System.Object[])">
            <summary>
            获取实体
            </summary>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.GetList">
            <summary>
            获取表的所有数据，当数据量很大时不要使用！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.GetListAsync">
            <summary>
            获取表的所有数据，当数据量很大时不要使用！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IBaseBusiness`1.GetIQueryable">
            <summary>
            获取实体对应的表，延迟加载，主要用于支持Linq查询操作
            </summary>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.IBusiness.IOperator">
            <summary>
            操作者
            </summary>
        </member>
        <member name="P:Coldairarrow.IBusiness.IOperator.UserId">
            <summary>
            当前操作者UserId
            </summary>
        </member>
        <member name="M:Coldairarrow.IBusiness.IOperator.IsAdmin">
            <summary>
            判断是否为超级管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IOperator.WriteUserLog(Coldairarrow.Util.UserLogType,System.String)">
            <summary>
            记录操作日志
            </summary>
            <param name="userLogType">用户日志类型</param>
            <param name="msg">内容</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.InsertAsync(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Insert(System.Collections.Generic.List{`0})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.InsertAsync(System.Collections.Generic.List{`0})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.InsertAsync(System.Collections.Generic.List{System.Object})">
            <summary>
            添加多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.BulkInsert(System.Collections.Generic.List{`0})">
            <summary>
            批量添加数据,速度快
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAll">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAllAsync">
            <summary>
            删除所有数据
            </summary>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Delete(System.String)">
            <summary>
            删除指定主键数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAsync(System.String)">
            <summary>
            删除指定主键数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            通过主键删除多条数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAsync(System.Collections.Generic.List{System.String})">
            <summary>
            通过主键删除多条数据
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Delete(`0)">
            <summary>
            删除单条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAsync(`0)">
            <summary>
            删除单条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAsync(System.Collections.Generic.List{`0})">
            <summary>
            删除多条数据
            </summary>
            <param name="entities">实体对象集合</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件数据
            </summary>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件数据
            </summary>
            <param name="condition">筛选条件</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteSql(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=&gt;x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">条件</param>
            <returns>
            影响条数
            </returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.DeleteSqlAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            使用SQL语句按照条件删除数据
            用法:Delete_Sql"Base_User"(x=&gt;x.Id == "Admin")
            注：生成的SQL类似于DELETE FROM [Base_User] WHERE [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">条件</param>
            <returns>
            影响条数
            </returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Update(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.UpdateAsync(`0)">
            <summary>
            更新一条数据
            </summary>
            <param name="entity">实体对象</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.UpdateAsync(System.Collections.Generic.List{`0})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.UpdateAsync(System.Collections.Generic.List{System.Object})">
            <summary>
            更新多条数据
            </summary>
            <param name="entities">数据列表</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            指定条件更新
            </summary>
            <param name="whereExpre">筛选表达式</param>
            <param name="set">更改属性回调</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{`0})">
            <summary>
            指定条件更新
            </summary>
            <param name="whereExpre">筛选表达式</param>
            <param name="set">更改属性回调</param>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.UpdateSql(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.UpdateSqlAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.ValueTuple{System.String,EFCore.Sharding.UpdateType,System.Object}[])">
            <summary>
            使用SQL语句按照条件更新
            用法:UpdateWhere_Sql"Base_User"(x=>x.Id == "Admin",("Name","小明"))
            注：生成的SQL类似于UPDATE [TABLE] SET [Name] = 'xxx' WHERE [Id] = 'Admin'
            </summary>
            <param name="where">筛选条件</param>
            <param name="values">字段值设置</param>
            <returns>影响条数</returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式条件获取单个实体
            </summary>
            <param name="predicate">lambda表达式条件</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式条件获取单个实体
            </summary>
            <param name="predicate">lambda表达式条件</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.GetEntity(System.Object[])">
            <summary>
            获取实体
            </summary>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.GetEntityAsync(System.Object[])">
            <summary>
            获取实体
            </summary>
            <param name="keyValue">主键</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.GetList">
            <summary>
            获取表的所有数据，当数据量很大时不要使用！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.GetListAsync">
            <summary>
            获取表的所有数据，当数据量很大时不要使用！
            </summary>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.IBusiness.IShardingBaseBusiness`1.GetIQueryable">
            <summary>
            获取实体对应的表，延迟加载，主要用于支持Linq查询操作
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
