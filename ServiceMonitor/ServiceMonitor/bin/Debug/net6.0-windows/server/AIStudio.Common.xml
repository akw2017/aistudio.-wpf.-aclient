<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AIStudio.Common</name>
    </assembly>
    <members>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig">
            <summary>
            全局静态配置
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.Configuration">
            <summary>
            获取 Configuration 的单例
            </summary>
        </member>
        <member name="M:AIStudio.Common.AppSettings.AppSettingsConfig.Configure(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="serviceProvider"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AIStudio.Common.AppSettings.AppSettingsConfig.Configure_(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            设置 Configuration 的实例
            </summary>
            <param name="configuration"></param>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.RecordRequestOptions">
            <summary>
            记录请求
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.RecordRequestOptions.IsEnabled">
            <summary>
            请求消息记录
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.RecordRequestOptions.IsSkipGetMethod">
            <summary>
            跳过Get方法
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions">
            <summary>
            系统设置
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.SeedData">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.CodeFirst">
            <summary>
            自动初始化数据库表
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.UseKestrel">
            <summary>
            使用Https
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.InjectMiniProfiler">
            <summary>
            开启InjectMiniProfiler
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.SuperAdminViewAllData">
            <summary>
            开启超级管理员查看全部数据
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.MultiTenant">
            <summary>
            是否开启多租户
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AppSettingsOptions.UseWorkflow">
            <summary>
            是否使用工作流
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.AllowCors">
            <summary>
            允许跨域请求列表
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.urls">
            <summary>
            发布的地址与端口
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions">
            <summary>
            Jwt 配置
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.SecretKey">
            <summary>
            SecretKey
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.RefreshSecretKey">
            <summary>
            刷新Key
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.Issuer">
            <summary>
            Issuer
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.Audience">
            <summary>
            Audience
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.AccessExpireHours">
            <summary>
            AccessExpireHours
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.RefreshExpireHours">
            <summary>
            RefreshExpireHours
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.ClockSkew">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.JwtOptions.RefreshClockSkew">
            <summary>
            
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.RedisOptions">
            <summary>
            Redis 配置
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.RedisOptions.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.RedisOptions.ConnectionString">
            <summary>
            ConnectionString
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.RedisOptions.Instance">
            <summary>
            Instance
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.ConnectionStringsOptions">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.ConnectionStringsOptions.DbConfigs">
            <summary>
            数据库集合
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.SnowIdOptions">
            <summary>
            雪花ID
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.SnowIdOptions.WorkerId">
            <summary>
            IdHelper的WorkerId
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.AppSettingsConfig.CertificateOptions">
            <summary>
            https证书配置
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.CertificateOptions.Path">
            <summary>
            证书地址
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.CertificateOptions.Password">
            <summary>
            证书密码
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.AppSettingsConfig.CertificateOptions.Key">
            <summary>
            证书Key
            </summary>
        </member>
        <member name="T:AIStudio.Common.AppSettings.DbConfig">
            <summary>
            数据库参数
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.DbConfig.DbNumber">
            <summary>
            数据库编号
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.DbConfig.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.DbConfig.DbString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:AIStudio.Common.AppSettings.DbConfig.DbName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="T:AIStudio.Common.Authentication.Jwt.JwtHelper">
            <summary>
            JWT Helper
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.CreateToken(System.Collections.Generic.List{System.Security.Claims.Claim},System.Boolean)">
            <summary>
            创建Token
            </summary>
            <param name="claims">The claims.</param>
            <param name="isRefresh">if set to <c>true</c> [is refresh].</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.Validate(System.String,System.String)">
            <summary>
            验证 Token
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="secretKey">The secret key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.CreateTokenValidationParameters(System.String)">
            <summary>
            生成Token验证参数
            </summary>
            <param name="secretKey">The secret key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.Exchange(System.String,System.String,System.String,System.String,Microsoft.AspNetCore.Http.HttpContext,System.Double,System.Int64)">
            <summary>
            通过过期Token 和 刷新Token 换取新的 Token
            </summary>
            <param name="expiredToken">The expired token.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="secretKey">The secret key.</param>
            <param name="refreshSecretKey">The refresh secret key.</param>
            <param name="httpContext">The HTTP context.</param>
            <param name="expiredTime">过期时间（分钟）</param>
            <param name="clockSkew">刷新token容差值，秒做单位</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.Encrypt(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Double)">
            <summary>
            生成 Token
            </summary>
            <param name="payload">The payload.</param>
            <param name="secretKey">The secret key.</param>
            <param name="expiredTime">过期时间（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.Encrypt(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey">The issuer signing key.</param>
            <param name="payload">The payload.</param>
            <param name="algorithm">The algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.Encrypt(System.String,System.String,System.String)">
            <summary>
            生成 Token
            </summary>
            <param name="issuerSigningKey">The issuer signing key.</param>
            <param name="payload">The payload.</param>
            <param name="algorithm">The algorithm.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.CombinePayload(System.Collections.Generic.IDictionary{System.String,System.Object},System.Double)">
            <summary>
            组合 Claims 负荷
            </summary>
            <param name="payload">The payload.</param>
            <param name="expiredTime">过期时间，单位：分钟</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.SecurityReadJwtToken(System.String)">
            <summary>
            读取 Token，不含验证
            </summary>
            <param name="accessToken">The access token.</param>
            <returns></returns>
        </member>
        <member name="F:AIStudio.Common.Authentication.Jwt.JwtHelper.DateTypeClaimTypes">
            <summary>
            日期类型的 Claim 类型
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.GenerateRefreshToken(System.String,System.String,System.Int64)">
            <summary>
            生成刷新 Token
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="SecretKey">The secret key.</param>
            <param name="expiredTime">刷新 Token 有效期（分钟）</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtHelper.CreateToken">
            <summary>
            测试使用的，别用
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Authentication.Jwt.JwtHelper.Permissions">
            <summary>
            测试权限类型
            </summary>
        </member>
        <member name="F:AIStudio.Common.Authentication.Jwt.JwtHelper.Permissions.Auto">
            <summary>
            User
            </summary>
        </member>
        <member name="F:AIStudio.Common.Authentication.Jwt.JwtHelper.Permissions.Add">
            <summary>
            UserCreate
            </summary>
        </member>
        <member name="F:AIStudio.Common.Authentication.Jwt.JwtHelper.Permissions.Edit">
            <summary>
            UserUpdate
            </summary>
        </member>
        <member name="F:AIStudio.Common.Authentication.Jwt.JwtHelper.Permissions.Delete">
            <summary>
            UserDelete
            </summary>
        </member>
        <member name="T:AIStudio.Common.Authentication.Jwt.JwtServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authentication.Jwt.JwtServiceCollectionExtensions.AddJwtAuthentication_(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the JWT authentication.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Jwt.SimpleClaimTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Role">
            <summary>
            The role
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Sid">
            <summary>
            The sid
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Version">
            <summary>
            The version
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Email">
            <summary>
            The email
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Expiration">
            <summary>
            The expiration
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Expired">
            <summary>
            The expired
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.UserId">
            <summary>
            The user identifier
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Actor">
            <summary>
            The actor
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.SuperAdmin">
            <summary>
            是否超级管理
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Admin">
            <summary>
            是否超级管理
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.TenantType">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.TenantName">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="F:AIStudio.Common.Jwt.SimpleClaimTypes.Permission">
            <summary>
            The permission
            </summary>
        </member>
        <member name="T:AIStudio.Common.Authorization.AuthorizationServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authorization.AuthorizationServiceCollectionExtensions.AddAuthorization_(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the authorization.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Authorization.DefaultPermissionChecker">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.Authorization.IPermissionChecker" />
        </member>
        <member name="M:AIStudio.Common.Authorization.DefaultPermissionChecker.IsGrantedAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Determines whether [is granted asynchronous] [the specified claims principal].
            </summary>
            <param name="claimsPrincipal">The claims principal.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Authorization.IPermissionChecker">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authorization.IPermissionChecker.IsGrantedAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Determines whether [is granted asynchronous] [the specified claims principal].
            </summary>
            <param name="claimsPrincipal">The claims principal.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Authorization.SimpleAuthorizationHandler">
            <summary>
            
            </summary>
            <seealso cref="!:Microsoft.AspNetCore.Authorization.AuthorizationHandler&lt;AIStudio.Common.Authorization.SimpleAuthorizationRequirement&gt;" />
        </member>
        <member name="F:AIStudio.Common.Authorization.SimpleAuthorizationHandler._checker">
            <summary>
            The checker
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationHandler.#ctor(AIStudio.Common.Authorization.IPermissionChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Authorization.SimpleAuthorizationHandler"/> class.
            </summary>
            <param name="checker">The checker.</param>
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,AIStudio.Common.Authorization.SimpleAuthorizationRequirement)">
            <summary>
            Makes a decision if authorization is allowed based on a specific requirement.
            </summary>
            <param name="context">The authorization context.</param>
            <param name="requirement">The requirement to evaluate.</param>
        </member>
        <member name="T:AIStudio.Common.Authorization.SimpleAuthorizationPolicyProvider">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Authorization.DefaultAuthorizationPolicyProvider" />
            <seealso cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider" />
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Authorization.SimpleAuthorizationPolicyProvider"/> class.
            </summary>
            <param name="options">The options used to configure this instance.</param>
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationPolicyProvider.GetDefaultPolicyAsync">
            <summary>
            Gets the default authorization policy.
            </summary>
            <returns>
            The default authorization policy.
            </returns>
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationPolicyProvider.GetFallbackPolicyAsync">
            <summary>
            Gets the fallback authorization policy.
            </summary>
            <returns>
            The fallback authorization policy.
            </returns>
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            Gets a <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy" /> from the given <paramref name="policyName" />
            </summary>
            <param name="policyName">The policy name to retrieve.</param>
            <returns>
            The named <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />.
            </returns>
        </member>
        <member name="T:AIStudio.Common.Authorization.SimpleAuthorizationRequirement">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationRequirement" />
        </member>
        <member name="P:AIStudio.Common.Authorization.SimpleAuthorizationRequirement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:AIStudio.Common.Authorization.SimpleAuthorizationRequirement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Authorization.SimpleAuthorizationRequirement"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:AIStudio.Common.Authorization.TestPermissionChecker">
            <summary>
            使用jwt信息鉴权
            </summary>
        </member>
        <member name="M:AIStudio.Common.Authorization.TestPermissionChecker.IsGrantedAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            鉴权
            </summary>
            <param name="claimsPrincipal"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Cache.CacheHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.Cache.CacheHelper._cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="P:AIStudio.Common.Cache.CacheHelper.Cache">
            <summary>
            Gets the cache.
            </summary>
            <value>
            The cache.
            </value>
            <exception cref="T:System.NullReferenceException">Cache</exception>
        </member>
        <member name="F:AIStudio.Common.Cache.CacheHelper.KeySetCacheKey">
            <summary>
            缓存所有索引键（Key）
            </summary>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.Configure(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Configures the specified cache.
            </summary>
            <param name="cache">The cache.</param>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.ArgumentNullException">cache</exception>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asynchronous.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.Refresh(System.String)">
            <summary>
            Refreshes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RefreshAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Refreshes the asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the range.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveRangeAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the range asynchronous.
            </summary>
            <param name="keys">The keys.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.Set(System.String,System.Byte[])">
            <summary>
            Sets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
            <summary>
            Sets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.SetAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sets the asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.SetAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sets the asynchronous.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.SetAsync``1(System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the asynchronous.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.GetKeySet">
            <summary>
            Gets the key set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.GetKeySetAsync">
            <summary>
            Gets the key set asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.AddCacheKey(System.String)">
            <summary>
            Adds the cache key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.AddCacheKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the cache key asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.AddRangeCacheKey(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the range cache key.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.AddRangeCacheKeyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Adds the range cache key asynchronous.
            </summary>
            <param name="keys">The keys.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveCacheKey(System.String)">
            <summary>
            Removes the cache key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveCacheKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the cache key asynchronous.
            </summary>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveRangeCacheKey(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the range cache key.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.RemoveRangeCacheKeyAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the range cache key asynchronous.
            </summary>
            <param name="keys">The keys.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheHelper.GetKey(System.String[])">
            <summary>
            Gets the key.
            </summary>
            <param name="partialKeys">The partial keys.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Cache.CacheServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Cache.CacheServiceCollectionExtensions.AddCache_(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册缓存服务，如有配置 Redis 则启用，没有则启用分布式内存缓存（DistributedMemoryCache）
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Cache.DistributedCacheEextensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Cache.DistributedCacheEextensions.Get``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.DistributedCacheEextensions.GetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the asynchronous.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Cache.DistributedCacheEextensions.Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0)">
            <summary>
            Sets the specified key.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.DistributedCacheEextensions.Set``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
            <summary>
            Sets the specified key.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.DistributedCacheEextensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sets the asynchronous.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Cache.DistributedCacheEextensions.SetAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
            <summary>
            Sets the asynchronous.
            </summary>
            <typeparam name="TCacheItem">The type of the cache item.</typeparam>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="options">The options.</param>
            <param name="token">The token.</param>
        </member>
        <member name="T:AIStudio.Common.CurrentUser.IOperator">
            <summary>
            操作者
            </summary>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.UserId">
            <summary>
            当前操作者UserId
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.IsSuperAdmin">
            <summary>
            Gets a value indicating whether this instance is super admin.
            </summary>
            <value>
              <c>true</c> if this instance is super admin; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.LoginUserId">
            <summary>
            Gets or sets the login user identifier.
            </summary>
            <value>
            The login user identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.LoginUserName">
            <summary>
            Gets or sets the name of the login user.
            </summary>
            <value>
            The name of the login user.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.IOperator.LoginTenantId">
            <summary>
            Gets or sets the login tenant identifier.
            </summary>
            <value>
            The login tenant identifier.
            </value>
        </member>
        <member name="T:AIStudio.Common.CurrentUser.Operator">
            <summary>
            操作者
            </summary>
            <seealso cref="T:AIStudio.Common.CurrentUser.IOperator" />
            <seealso cref="T:AIStudio.Common.DI.IScopedDependency" />
        </member>
        <member name="F:AIStudio.Common.CurrentUser.Operator._serviceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="M:AIStudio.Common.CurrentUser.Operator.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.CurrentUser.Operator"/> class.
            </summary>
            <param name="httpContextAccessor">The HTTP context accessor.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator._httpContextAccessor">
            <summary>
            Gets the HTTP context accessor.
            </summary>
            <value>
            The HTTP context accessor.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.UserId">
            <summary>
            当前操作者UserId
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.UserName">
            <summary>
            Gets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.IsSuperAdmin">
            <summary>
            Gets a value indicating whether this instance is super admin.
            </summary>
            <value>
              <c>true</c> if this instance is super admin; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.LoginUserId">
            <summary>
            Gets or sets the login user identifier.
            </summary>
            <value>
            The login user identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.LoginUserName">
            <summary>
            Gets or sets the name of the login user.
            </summary>
            <value>
            The name of the login user.
            </value>
        </member>
        <member name="P:AIStudio.Common.CurrentUser.Operator.LoginTenantId">
            <summary>
            Gets or sets the login tenant identifier.
            </summary>
            <value>
            The login tenant identifier.
            </value>
        </member>
        <member name="M:AIStudio.Common.CurrentUser.Operator.FindClaim(System.String)">
            <summary>
            Finds the claim.
            </summary>
            <param name="claimType">Type of the claim.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.CurrentUser.Operator.FindClaims(System.String)">
            <summary>
            Finds the claims.
            </summary>
            <param name="claimType">Type of the claim.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.CurrentUser.Operator.FindClaimValue(System.String)">
            <summary>
            Finds the claim value.
            </summary>
            <param name="claimType">Type of the claim.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.CustomAttribute.PhysicDeleteTypeAttribute">
            <summary>
            
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:AIStudio.Common.CustomAttribute.PhysicDeleteTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.CustomAttribute.PhysicDeleteTypeAttribute"/> class.
            </summary>
        </member>
        <member name="T:AIStudio.Common.DI.AOP.BaseAOPAttribute">
            <summary>
            AOP基类
            注:不支持控制器,需要定义接口并实现接口,自定义AOP特性放到接口实现类上
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:AIStudio.Common.DI.AOP.BaseAOPAttribute.Befor(AIStudio.Common.DI.AOP.IAOPContext)">
            <summary>
            Befors the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.BaseAOPAttribute.After(AIStudio.Common.DI.AOP.IAOPContext)">
            <summary>
            Afters the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:AIStudio.Common.DI.AOP.CastleAOPContext">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.DI.AOP.IAOPContext" />
        </member>
        <member name="F:AIStudio.Common.DI.AOP.CastleAOPContext._invocation">
            <summary>
            The invocation
            </summary>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleAOPContext.#ctor(Castle.DynamicProxy.IInvocation,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.DI.AOP.CastleAOPContext"/> class.
            </summary>
            <param name="invocation">The invocation.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
            <value>
            The service provider.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.GenericArguments">
            <summary>
            Gets the generic arguments.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.Method">
            <summary>
            Gets the method.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.MethodInvocationTarget">
            <summary>
            Gets the method invocation target.
            </summary>
            <value>
            The method invocation target.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.Proxy">
            <summary>
            Gets the proxy.
            </summary>
            <value>
            The proxy.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.ReturnValue">
            <summary>
            Gets or sets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>
            The type of the target.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.CastleAOPContext.InvocationTarget">
            <summary>
            Gets the invocation target.
            </summary>
            <value>
            The invocation target.
            </value>
        </member>
        <member name="T:AIStudio.Common.DI.AOP.CastleInterceptor">
            <summary>
            
            </summary>
            <seealso cref="T:Castle.DynamicProxy.AsyncInterceptorBase" />
        </member>
        <member name="F:AIStudio.Common.DI.AOP.CastleInterceptor._serviceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleInterceptor.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.DI.AOP.CastleInterceptor"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="F:AIStudio.Common.DI.AOP.CastleInterceptor._aopContext">
            <summary>
            The aop context
            </summary>
        </member>
        <member name="F:AIStudio.Common.DI.AOP.CastleInterceptor._aops">
            <summary>
            The aops
            </summary>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleInterceptor.Befor">
            <summary>
            Befors this instance.
            </summary>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleInterceptor.After">
            <summary>
            Afters this instance.
            </summary>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleInterceptor.Init(Castle.DynamicProxy.IInvocation)">
            <summary>
            Initializes the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleInterceptor.InterceptAsync(Castle.DynamicProxy.IInvocation,Castle.DynamicProxy.IInvocationProceedInfo,System.Func{Castle.DynamicProxy.IInvocation,Castle.DynamicProxy.IInvocationProceedInfo,System.Threading.Tasks.Task})">
            <summary>
            Override in derived classes to intercept method invocations.
            </summary>
            <param name="invocation">The method invocation.</param>
            <param name="proceedInfo">The <see cref="T:Castle.DynamicProxy.IInvocationProceedInfo" />.</param>
            <param name="proceed">The function to proceed the <paramref name="proceedInfo" />.</param>
        </member>
        <member name="M:AIStudio.Common.DI.AOP.CastleInterceptor.InterceptAsync``1(Castle.DynamicProxy.IInvocation,Castle.DynamicProxy.IInvocationProceedInfo,System.Func{Castle.DynamicProxy.IInvocation,Castle.DynamicProxy.IInvocationProceedInfo,System.Threading.Tasks.Task{``0}})">
            <summary>
            Override in derived classes to intercept method invocations.
            </summary>
            <typeparam name="TResult">The type of the <see cref="T:System.Threading.Tasks.Task`1" /><see cref="P:System.Threading.Tasks.Task`1.Result" />.</typeparam>
            <param name="invocation">The method invocation.</param>
            <param name="proceedInfo">The <see cref="T:Castle.DynamicProxy.IInvocationProceedInfo" />.</param>
            <param name="proceed">The function to proceed the <paramref name="proceedInfo" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:AIStudio.Common.DI.AOP.IAOPContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
            <value>
            The service provider.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.GenericArguments">
            <summary>
            Gets the generic arguments.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.Method">
            <summary>
            Gets the method.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.MethodInvocationTarget">
            <summary>
            Gets the method invocation target.
            </summary>
            <value>
            The method invocation target.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.Proxy">
            <summary>
            Gets the proxy.
            </summary>
            <value>
            The proxy.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.ReturnValue">
            <summary>
            Gets or sets the return value.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>
            The type of the target.
            </value>
        </member>
        <member name="P:AIStudio.Common.DI.AOP.IAOPContext.InvocationTarget">
            <summary>
            Gets the invocation target.
            </summary>
            <value>
            The invocation target.
            </value>
        </member>
        <member name="T:AIStudio.Common.DI.AOP.TestAOP">
            <summary>
            
            </summary>
            <seealso cref="T:Castle.DynamicProxy.IInterceptor" />
        </member>
        <member name="M:AIStudio.Common.DI.AOP.TestAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="T:AIStudio.Common.DI.DIServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.DI.DIServiceCollectionExtensions._generator">
            <summary>
            The generator
            </summary>
        </member>
        <member name="M:AIStudio.Common.DI.DIServiceCollectionExtensions.AddServices_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{System.Type})">
            <summary>
            自动注册程序集的服务
            </summary>
            <param name="services">The services.</param>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.DI.DIServiceCollectionExtensions.AddProxiedService``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime,System.Type[])">
            <summary>
            注入AOP服务
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="services">The services.</param>
            <param name="serviceLifetime">The service lifetime.</param>
            <param name="aoptypes">The aoptypes.</param>
        </member>
        <member name="T:AIStudio.Common.DI.IScopedDependency">
            <summary>
            注入标记,生命周期为Scope
            </summary>
        </member>
        <member name="T:AIStudio.Common.DI.ISingletonDependency">
            <summary>
            注入标记,生命周期为Singleton
            </summary>
        </member>
        <member name="T:AIStudio.Common.DI.ITransientDependency">
            <summary>
            注入标记,生命周期为Transient
            </summary>
        </member>
        <member name="T:AIStudio.Common.EventBus.Abstract.EventModel">
            <summary>
            基础事件模型
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.IEventModel" />
        </member>
        <member name="P:AIStudio.Common.EventBus.Abstract.EventModel.Id">
            <summary>
            事件模型唯一Id。
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Abstract.EventModel.UtcNow">
            <summary>
            创建事件对象时的 Utc 时间。
            </summary>
            <value>
            The UTC now.
            </value>
        </member>
        <member name="M:AIStudio.Common.EventBus.Abstract.EventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Abstract.EventModel"/> class.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Abstract.EventModel.#ctor(System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Abstract.EventModel"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="utcNow">The UTC now.</param>
        </member>
        <member name="T:AIStudio.Common.EventBus.Abstract.IEventHandler`1">
            <summary>
            事件处理程序。
            即消费者（Subscriber）。
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:AIStudio.Common.EventBus.Abstract.IEventHandler`1.Handle(`0)">
            <summary>
            处理程序
            </summary>
            <param name="event">事件模型</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Abstract.IEventModel">
            <summary>
            事件模型接口
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Abstract.IEventModel.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Abstract.IEventModel.UtcNow">
            <summary>
            Gets the UTC now.
            </summary>
            <value>
            The UTC now.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.Abstract.IEventPublisher">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Abstract.IEventPublisher.PublishAsync``1(``0)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Abstract.ISubscribeManager">
            <summary>
            订阅管理器。
            主要负责提供订阅者列表，事件处理程序。
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Abstract.ISubscribeManager.Subscribers">
            <summary>
            订阅者列表
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Abstract.ISubscribeManager.ProcessEvent(System.Object)">
            <summary>
            处理事件
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Core.DefaultEventPublisher">
            <summary>
            事件总线发布者默认实现
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.IEventPublisher" />
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.DefaultEventPublisher.PublishAsync``1(``0)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Core.EventBusBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Core.EventBusBuilder.Services">
            <summary>
            Gets the services.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Core.EventBusBuilder.Subscribers">
            <summary>
            订阅者字典列表
            </summary>
            <value>
            The subscribers.
            </value>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.EventBusBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,AIStudio.Common.EventBus.Core.SubscriberDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Core.EventBusBuilder"/> class.
            </summary>
            <param name="services">The services.</param>
            <param name="subscribers">The subscribers.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.EventBusBuilder.AddSubscriber(System.Action{AIStudio.Common.EventBus.Core.SubscriberDictionary})">
            <summary>
            配置订阅者字典列表
            </summary>
            <param name="configAction">配置程序</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Core.SubscribeManager">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.ISubscribeManager" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Core.SubscribeManager._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Core.SubscribeManager._serviceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Core.SubscribeManager._subscriberDictionary">
            <summary>
            The subscriber dictionary
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Core.SubscribeManager.Subscribers">
            <summary>
            订阅者列表
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.SubscribeManager.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.Core.SubscribeManager},System.IServiceProvider,AIStudio.Common.EventBus.Core.SubscriberDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Core.SubscribeManager"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="subscriberDictionary">The subscriber dictionary.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.SubscribeManager.ProcessEvent(System.Object)">
            <summary>
            处理事件
            </summary>
            <param name="event"></param>
        </member>
        <member name="T:AIStudio.Common.EventBus.Core.SubscriberDictionary">
            <summary>
            订阅者字典列表
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Core.SubscriberDictionary._subscribers">
            <summary>
            The subscribers
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.SubscriberDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Core.SubscriberDictionary"/> class.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.SubscriberDictionary.Add``2">
            <summary>
            Adds this instance.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <typeparam name="THandler">The type of the handler.</typeparam>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.SubscriberDictionary.Add(AIStudio.Common.EventBus.Core.SubscriberDictionary)">
            <summary>
            Adds the specified subscribers.
            </summary>
            <param name="subscribers">The subscribers.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Core.SubscriberDictionary.ToDictionary">
            <summary>
            Converts to dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.EventHandlers.TestEvent">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.EventModel" />
        </member>
        <member name="P:AIStudio.Common.EventBus.EventHandlers.TestEvent.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.EventHandlers.TestEventHandler">
            <summary>
            
            </summary>
            <seealso cref="!:AIStudio.Common.EventBus.Abstract.IEventHandler&lt;AIStudio.Common.EventBus.EventHandlers.TestEvent&gt;" />
        </member>
        <member name="F:AIStudio.Common.EventBus.EventHandlers.TestEventHandler._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.EventHandlers.TestEventHandler.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.EventHandlers.TestEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.EventHandlers.TestEventHandler"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.EventHandlers.TestEventHandler.Handle(AIStudio.Common.EventBus.EventHandlers.TestEvent)">
            <summary>
            处理程序
            </summary>
            <param name="event">事件模型</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Local.ChannelEventStore">
            <summary>
            基于 Channel 的队列存储器
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Local.IEventStore" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Local.ChannelEventStore._queue">
            <summary>
            The queue
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.ChannelEventStore.#ctor(Microsoft.Extensions.Options.IOptions{AIStudio.Common.EventBus.Local.LocalEventBusOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Local.ChannelEventStore"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.ChannelEventStore.WriteAsync``1(``0)">
            <summary>
            Writes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">event</exception>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.ChannelEventStore.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Local.IEventStore">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.IEventStore.WriteAsync``1(``0)">
            <summary>
            Writes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.IEventStore.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Local.LocalEventBusHostedService">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.BackgroundService" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Local.LocalEventBusHostedService._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Local.LocalEventBusHostedService._subscribeExecuter">
            <summary>
            The subscribe executer
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Local.LocalEventBusHostedService._queue">
            <summary>
            The queue
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventBusHostedService.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.Local.LocalEventBusHostedService},AIStudio.Common.EventBus.Abstract.ISubscribeManager,AIStudio.Common.EventBus.Local.IEventStore)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Local.LocalEventBusHostedService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="subscribeExecuter">The subscribe executer.</param>
            <param name="queue">The queue.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventBusHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called when the <see cref="T:Microsoft.Extensions.Hosting.IHostedService" /> starts. The implementation should return a task that represents
            the lifetime of the long running operation(s) being performed.
            </summary>
            <param name="stoppingToken">Triggered when <see cref="M:Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)" /> is called.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that represents the long running operations.
            </returns>
            <remarks>
            See <see href="https://docs.microsoft.com/dotnet/core/extensions/workers">Worker Services in .NET</see> for implementation guidelines.
            </remarks>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventBusHostedService.ProcessTaskQueueAsync(System.Threading.CancellationToken)">
            <summary>
            Processes the task queue asynchronous.
            </summary>
            <param name="stoppingToken">The stopping token.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventBusHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the asynchronous.
            </summary>
            <param name="stoppingToken">The stopping token.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventBusHostedService.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:AIStudio.Common.EventBus.Local.LocalEventBusOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Local.LocalEventBusOptions.Capacity">
            <summary>
            队列容量
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.Local.LocalEventPublisher">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.IEventPublisher" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Local.LocalEventPublisher._eventStore">
            <summary>
            The event store
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventPublisher.#ctor(AIStudio.Common.EventBus.Local.IEventStore)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Local.LocalEventPublisher"/> class.
            </summary>
            <param name="eventStore">The event store.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Local.LocalEventPublisher.PublishAsync``1(``0)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.CreatorId">
            <summary>
            操作人账号
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.CreatorName">
            <summary>
            操作人名称
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.Name">
            <summary>
            异常名称
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.Message">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.ClassName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.ExceptionSource">
            <summary>
            异常源
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.StackTrace">
            <summary>
            堆栈信息
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.Parameters">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.ExceptionEvent.ExceptionTime">
            <summary>
            异常时间
            </summary>
        </member>
        <member name="T:AIStudio.Common.EventBus.Models.VisitEvent">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Models.RequestEvent" />
        </member>
        <member name="T:AIStudio.Common.EventBus.Models.RequestEvent">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.EventModel" />
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.CreatorId">
            <summary>
            操作人
            </summary>
            <value>
            The creator identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.CreatorName">
            <summary>
            操作人名称
            </summary>
            <value>
            The name of the creator.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.TenantId">
            <summary>
            租户Id
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Name">
            <summary>
            日志名称
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.IsSuccess">
            <summary>
            是否执行成功
            </summary>
            <value>
              <c>true</c> if this instance is success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Message">
            <summary>
            具体消息
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Browser">
            <summary>
            浏览器
            </summary>
            <value>
            The browser.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.OperatingSystem">
            <summary>
            操作系统
            </summary>
            <value>
            The operating system.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Ip">
            <summary>
            IP
            </summary>
            <value>
            The ip.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Url">
            <summary>
            完整请求地址
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Path">
            <summary>
            请求路径
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.ClassName">
            <summary>
            类名称
            </summary>
            <value>
            The name of the class.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.MethodName">
            <summary>
            方法名称
            </summary>
            <value>
            The name of the method.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.RequestMethod">
            <summary>
            请求方式
            </summary>
            <value>
            The request method.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Body">
            <summary>
            请求Body
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.Result">
            <summary>
            返回结果
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.ElapsedTime">
            <summary>
            耗时
            </summary>
            <value>
            The elapsed time.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.RequestEvent.OperatingTime">
            <summary>
            操作时间
            </summary>
            <value>
            The operating time.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.Models.SystemEvent">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.EventModel" />
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.SystemEvent.CreatorId">
            <summary>
            操作人
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.SystemEvent.CreatorName">
            <summary>
            操作人名称
            </summary>
            <value>
            The name of the creator.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.SystemEvent.TenantId">
            <summary>
            租户Id
            </summary>
            <value>
            The tenant identifier.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.SystemEvent.LogType">
            <summary>
            日志类型
            </summary>
            <value>
            The type of the log.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.SystemEvent.Name">
            <summary>
            日志名称
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Models.SystemEvent.Message">
            <summary>
            日志内容
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager.Connection">
            <summary>
            RabbitMQ 连接实例
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager.ExChangeName">
            <summary>
            启用的交换机名称
            </summary>
            <value>
            The name of the ex change.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager.ExChangeType">
            <summary>
            启用的交换机类型
            </summary>
            <value>
            The type of the ex change.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager.QueueName">
            <summary>
            启用的队列名称
            </summary>
            <value>
            The name of the queue.
            </value>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager.StartSubscribe">
            <summary>
            启动订阅。
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager.PublishAsync``1(``0)">
            <summary>
            发布消息。
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.IHostedService" />
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService._rabbitMqManager">
            <summary>
            The rabbit mq manager
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService},AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="rabbitMqManager">The rabbit mq manager.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is ready to start the service.
            </summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            </summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.ExChangeName">
            <summary>
            RabbitMQ 有效。交换机名称。
            </summary>
            <value>
            The name of the ex change.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.ExChangeType">
            <summary>
            RabbitMQ 有效。交换机类型。
            </summary>
            <value>
            The type of the ex change.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.QueueName">
            <summary>
            RabbitMQ 有效。队列名称。
            如果是分布式部署，若节点队列名称相同，则只会有一个节点消费消息。
            </summary>
            <value>
            The name of the queue.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.HostName">
            <summary>
            Gets or sets the name of the host.
            </summary>
            <value>
            The name of the host.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions.VirtualHost">
            <summary>
            Gets or sets the virtual host.
            </summary>
            <value>
            The virtual host.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventPublisher">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.IEventPublisher" />
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventPublisher._rabbitMqManager">
            <summary>
            The rabbit mq manager
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventPublisher.#ctor(AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventPublisher"/> class.
            </summary>
            <param name="rabbitMqManager">The rabbit mq manager.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqEventPublisher.PublishAsync``1(``0)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.RabbitMq.IRabbitMqManager" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._connectionFactory">
            <summary>
            The connection factory
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._subscribeExecuter">
            <summary>
            The subscribe executer
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._consumerChannel">
            <summary>
            The consumer channel
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._started">
            <summary>
            The started
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._connectionLock">
            <summary>
            The connection lock
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager._startLock">
            <summary>
            The start lock
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.Connection">
            <summary>
            RabbitMQ 连接实例
            </summary>
            <exception cref="T:System.NullReferenceException">Connection</exception>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.ConsumerChannel">
            <summary>
            消费者 Channel 实例
            </summary>
            <value>
            The consumer channel.
            </value>
            <exception cref="T:System.NullReferenceException">ConsumerChannel</exception>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.ExChangeName">
            <summary>
            启用的交换机名称
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.ExChangeType">
            <summary>
            启用的交换机类型
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.QueueName">
            <summary>
            启用的队列名称
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.#ctor(RabbitMQ.Client.IConnectionFactory,Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.RabbitMq.RabbitMqManager},AIStudio.Common.EventBus.Abstract.ISubscribeManager,Microsoft.Extensions.Options.IOptions{AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager"/> class.
            </summary>
            <param name="connectionFactory">The connection factory.</param>
            <param name="logger">The logger.</param>
            <param name="subscribeExecuter">The subscribe executer.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.Connect">
            <summary>
            Connects this instance.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.StartSubscribe">
            <summary>
            启动订阅。
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.PublishAsync``1(``0)">
            <summary>
            发布消息。
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.CreateDelegateConsumerReceived(System.Type)">
            <summary>
            Creates the delegate consumer received.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.RabbitMq.RabbitMqManager.CheckDisposed">
            <summary>
            Checks the disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:AIStudio.Common.EventBus.Redis.IRedisManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.IRedisManager.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.IRedisManager.Subscriber">
            <summary>
            Gets the subscriber.
            </summary>
            <value>
            The subscriber.
            </value>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.IRedisManager.StartSubscribe">
            <summary>
            Starts the subscribe.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.IRedisManager.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.IHostedService" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService._redisManager">
            <summary>
            The redis manager
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.Redis.RedisEventBusHostedService},AIStudio.Common.EventBus.Redis.IRedisManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="redisManager">The redis manager.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is ready to start the service.
            </summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisEventBusHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            </summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Redis.RedisEventBusOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.RedisEventBusOptions.Configuration">
            <summary>
            用于连接 Redis 的配置。
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.RedisEventBusOptions.ConfigurationOptions">
            <summary>
            用于连接 Redis 的配置。
            优先级高于 Configuration .
            </summary>
            <value>
            The configuration options.
            </value>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.RedisEventBusOptions.ConnectionMultiplexerFactory">
            <summary>
            获取或设置一个创建 ConnectionMultiplexer 实例的委托。
            </summary>
            <value>
            The connection multiplexer factory.
            </value>
        </member>
        <member name="T:AIStudio.Common.EventBus.Redis.RedisEventPublisher">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Abstract.IEventPublisher" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisEventPublisher._redisManager">
            <summary>
            The redis manager
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisEventPublisher.#ctor(AIStudio.Common.EventBus.Redis.IRedisManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Redis.RedisEventPublisher"/> class.
            </summary>
            <param name="redisManager">The redis manager.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisEventPublisher.PublishAsync``1(``0)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.EventBus.Redis.RedisManager">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.EventBus.Redis.IRedisManager" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._subscribeExecuter">
            <summary>
            The subscribe executer
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._options">
            <summary>
            The options
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._subscriber">
            <summary>
            The subscriber
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._started">
            <summary>
            The started
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._connectionLock">
            <summary>
            The connection lock
            </summary>
        </member>
        <member name="F:AIStudio.Common.EventBus.Redis.RedisManager._startLock">
            <summary>
            The start lock
            </summary>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.RedisManager.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>
            The connection.
            </value>
            <exception cref="T:System.NullReferenceException">Connection</exception>
        </member>
        <member name="P:AIStudio.Common.EventBus.Redis.RedisManager.Subscriber">
            <summary>
            Gets the subscriber.
            </summary>
            <value>
            The subscriber.
            </value>
            <exception cref="T:System.NullReferenceException">Subscriber</exception>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.EventBus.Redis.RedisManager},AIStudio.Common.EventBus.Abstract.ISubscribeManager,Microsoft.Extensions.Options.IOptions{AIStudio.Common.EventBus.Redis.RedisEventBusOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.EventBus.Redis.RedisManager"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="subscribeExecuter">The subscribe executer.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.Connect">
            <summary>
            Connects this instance.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects the asynchronous.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.StartSubscribe">
            <summary>
            Starts the subscribe.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes the asynchronous.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="event">The event.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.CreateDelegateConsumerReceived(System.Type)">
            <summary>
            Creates the delegate consumer received.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:AIStudio.Common.EventBus.Redis.RedisManager.CheckDisposed">
            <summary>
            Checks the disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:AIStudio.Common.Extensions.HttpContextExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Extensions.HttpContextExtensions.GetRequestIPv4(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取请求的ip4
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Extensions.HttpRequestExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Extensions.HttpRequestExtensions.GetRequestUrlAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            获取完整请求地址
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Extensions.HttpResponseExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Extensions.HttpResponseExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,AIStudio.Util.Common.AjaxResult,System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="response">The response.</param>
            <param name="result">The result.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Extensions.HttpResponseExtensions.WriteAsync(Microsoft.AspNetCore.Http.HttpResponse,AIStudio.Util.Common.AjaxResult,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the asynchronous.
            </summary>
            <param name="response">The response.</param>
            <param name="result">The result.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            response
            or
            result
            or
            encoding
            </exception>
            <exception cref="T:System.Exception">HTTP响应已经开始，不可更改响应</exception>
        </member>
        <member name="T:AIStudio.Common.Extensions.SummaryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.Extensions.SummaryExtensions.SummaryXPathTemplate">
            <summary>
            The summary x path template
            </summary>
        </member>
        <member name="F:AIStudio.Common.Extensions.SummaryExtensions._cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="F:AIStudio.Common.Extensions.SummaryExtensions._cacheFail">
            <summary>
            The cache fail
            </summary>
        </member>
        <member name="M:AIStudio.Common.Extensions.SummaryExtensions.GetSummary(System.Type)">
            <summary>
            获取注释
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Extensions.SummaryExtensions.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            获取注释
            </summary>
            <param name="info">The information.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Extensions.SummaryExtensions.GetSummary(System.Type,System.String)">
            <summary>
            获取注释
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Extensions.SummaryExtensions.GetXmlDocument(System.Reflection.Assembly)">
            <summary>
            获取程序集对应的 XML 注释文档
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Extensions.SummaryExtensions.GetXmlDocumentNoCache(System.Reflection.Assembly)">
            <summary>
            获取程序集对应的 XML 注释文档
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Filter.AjaxResultActionFilter">
            <summary>
            
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter" />
        </member>
        <member name="F:AIStudio.Common.Filter.AjaxResultActionFilter._options">
            <summary>
            The options
            </summary>
        </member>
        <member name="P:AIStudio.Common.Filter.AjaxResultActionFilter.Order">
            <summary>
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> property.
            </summary>
            <remarks>
            <para>
            Filters are executed in an ordering determined by an ascending sort of the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> property.
            </para>
            <para>
            Asynchronous filters, such as <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />, surround the execution of subsequent
            filters of the same filter kind. An asynchronous filter with a lower numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
            value will have its filter method, such as <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)" />,
            executed before that of a filter with a higher value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />.
            </para>
            <para>
            Synchronous filters, such as <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />, have a before-method, such as
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)" />, and an after-method, such as
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)" />. A synchronous filter with a lower numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
            value will have its before-method executed before that of a filter with a higher value of
            <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />. During the after-stage of the filter, a synchronous filter with a lower
            numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> value will have its after-method executed after that of a filter with a higher
            value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />.
            </para>
            <para>
            If two filters have the same numeric value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />, then their relative execution order
            is determined by the filter scope.
            </para>
            </remarks>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.#ctor(Microsoft.Extensions.Options.IOptions{AIStudio.Common.Filter.FilterException.AjaxResultOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Filter.AjaxResultActionFilter"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Called asynchronously before the action, after model binding is complete.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext" />.</param>
            <param name="next">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate" />. Invoked to execute the next action filter or the action itself.</param>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.JsonContent(System.String)">
            <summary>
            返回JSON
            </summary>
            <param name="json">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.Success">
            <summary>
            返回成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.Success(System.String)">
            <summary>
            返回成功
            </summary>
            <param name="msg">消息</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.Success``1(``0)">
            <summary>
            返回成功
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">返回的数据</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.Error">
            <summary>
            返回错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.Error(System.String)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.AjaxResultActionFilter.Error(System.String,System.Int32)">
            <summary>
            返回错误
            </summary>
            <param name="msg">错误提示</param>
            <param name="errorCode">错误代码</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Filter.DataValidationFilter">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter" />
        </member>
        <member name="F:AIStudio.Common.Filter.DataValidationFilter.FilterOrder">
            <summary>
            The filter order
            </summary>
        </member>
        <member name="P:AIStudio.Common.Filter.DataValidationFilter.Order">
            <summary>
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> property.
            </summary>
            <remarks>
            <para>
            Filters are executed in an ordering determined by an ascending sort of the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> property.
            </para>
            <para>
            Asynchronous filters, such as <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />, surround the execution of subsequent
            filters of the same filter kind. An asynchronous filter with a lower numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
            value will have its filter method, such as <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)" />,
            executed before that of a filter with a higher value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />.
            </para>
            <para>
            Synchronous filters, such as <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />, have a before-method, such as
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)" />, and an after-method, such as
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)" />. A synchronous filter with a lower numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
            value will have its before-method executed before that of a filter with a higher value of
            <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />. During the after-stage of the filter, a synchronous filter with a lower
            numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> value will have its after-method executed after that of a filter with a higher
            value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />.
            </para>
            <para>
            If two filters have the same numeric value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />, then their relative execution order
            is determined by the filter scope.
            </para>
            </remarks>
        </member>
        <member name="M:AIStudio.Common.Filter.DataValidationFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Called before the action executes, after model binding is complete.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext" />.</param>
        </member>
        <member name="M:AIStudio.Common.Filter.DataValidationFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Called after the action executes, before the action result.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext" />.</param>
        </member>
        <member name="T:AIStudio.Common.Filter.FilterAttribute.IgnoreRequestRecordAttribute">
            <summary>
            忽略请求记录
            </summary>
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.IgnoreRequestRecordAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.IgnoreRequestRecordAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AIStudio.Common.Filter.FilterAttribute.NoFormatResponseAttribute">
            <summary>
            返回结果不进行格式化
            </summary>
            <seealso cref="T:System.Attribute" />
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.NoFormatResponseAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.NoFormatResponseAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext" />.</param>
        </member>
        <member name="T:AIStudio.Common.Filter.FilterAttribute.FilterExtentions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.FilterExtentions.ContainsFilter``1(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            是否拥有某过滤器
            </summary>
            <typeparam name="T">过滤器类型</typeparam>
            <param name="actionExecutingContext">上下文</param>
            <returns>
              <c>true</c> if the specified action executing context contains filter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:AIStudio.Common.Filter.FilterAttribute.RequestRecordAttribute">
            <summary>
            请求记录属性
            </summary>
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.RequestRecordAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            Action执行之前执行
            </summary>
            <param name="context">过滤器上下文</param>
        </member>
        <member name="M:AIStudio.Common.Filter.FilterAttribute.RequestRecordAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            Action执行完毕之后执行
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:AIStudio.Common.Filter.FilterException.AjaxResultOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.Filter.FilterException.AjaxResultOptions._resultFactory">
            <summary>
            The result factory
            </summary>
        </member>
        <member name="P:AIStudio.Common.Filter.FilterException.AjaxResultOptions.ResultFactory">
            <summary>
            Gets or sets the result factory.
            </summary>
            <value>
            The result factory.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="T:AIStudio.Common.Filter.MvcFilterServiceCollectionExtentions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Filter.MvcFilterServiceCollectionExtentions.AddDataValidation_(Microsoft.Extensions.DependencyInjection.IMvcBuilder)">
            <summary>
            配置模型验证
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Filter.MvcFilterServiceCollectionExtentions.AddFilter_(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Action{AIStudio.Common.Filter.FilterException.AjaxResultOptions})">
            <summary>
            Adds the filter.
            </summary>
            <param name="builder">The builder.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.IdGenerator.IdHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.IdGenerator.IdHelper.SetWorkId(System.UInt16)">
            <summary>
            Sets the work identifier.
            </summary>
            <param name="workerId">The worker identifier.</param>
        </member>
        <member name="M:AIStudio.Common.IdGenerator.IdHelper.GetId">
            <summary>
            Gets the identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.IdGenerator.IdHelper.GetlongId">
            <summary>
            Getlongs the identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Mapper.MapperServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Mapper.MapperServiceCollectionExtensions.AddMapper_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Action{AutoMapper.IMapperConfigurationExpression})">
            <summary>
            使用AutoMapper自动映射拥有MapAttribute的类
            </summary>
            <param name="services">服务集合</param>
            <param name="types">The types.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="configure">自定义配置</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Mapper.MapperServiceCollectionExtensions.IgnoreAllNonExisting(AutoMapper.IMappingExpression,System.Type,System.Type)">
            <summary>
            忽略所有不匹配的属性。
            </summary>
            <param name="expression">配置表达式</param>
            <param name="from">源类型</param>
            <param name="to">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Mapper.MapperServiceCollectionExtensions.IgnoreAllNonExisting``2(AutoMapper.IMappingExpression{``0,``1})">
            <summary>
            忽略所有不匹配的属性。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDestination">目标类型</typeparam>
            <param name="expression">配置表达式</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Mapper.MiniProfilerServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Mapper.MiniProfilerServiceCollectionExtensions.AddMiniProfiler_(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加 MiniProfiler 配置
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="M:AIStudio.Common.Mapper.MiniProfilerServiceCollectionExtensions.UseMiniProfiler_(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Mapper.MiniProfilerServiceCollectionExtensions.PrintToMiniProfiler(System.String,System.String,System.String,System.Boolean)">
            <summary>
            打印信息到 MiniProfiler
            </summary>
            <param name="category">分类</param>
            <param name="state">状态</param>
            <param name="message">消息</param>
            <param name="isError">是否为警告消息</param>
        </member>
        <member name="M:AIStudio.Common.Mapper.MiniProfilerServiceCollectionExtensions.CanBeMiniProfiler">
            <summary>
            判断是否启用 MiniProfiler
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Quartz.Extensions.CronHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.DateTime2Cron(System.DateTime)">
            <summary>
            Dates the time2 cron.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.Cron2DateTime(System.String)">
            <summary>
            Cron2s the date time.
            </summary>
            <param name="cron">The cron.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.DateTime2DateTimeOffset(System.Nullable{System.DateTime})">
            <summary>
            Dates the time2 date time offset.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.StartTime2DateTimeOffset(System.Nullable{System.DateTime})">
            <summary>
            Starts the time2 date time offset.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.DateTimeOffset2DateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            Dates the time offset2 date time.
            </summary>
            <param name="datetimeoffset">The datetimeoffset.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.IsValidExpression(System.String)">
            <summary>
            Determines whether [is valid expression].
            </summary>
            <param name="cronExpression">The cron expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.CronHelper.GetNextRunTime(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets the next run time.
            </summary>
            <param name="cronExpression">The cron expression.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Quartz.Extensions.HttpManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.HttpManager.GetUserIP(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            Gets the user ip.
            </summary>
            <param name="httpContextAccessor">The HTTP context accessor.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.HttpManager.HttpPostAsync(System.String,System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HTTPs the post asynchronous.
            </summary>
            <param name="url">The URL.</param>
            <param name="postData">The post data.</param>
            <param name="contentType">Type of the content.</param>
            <param name="timeOut">The time out.</param>
            <param name="headers">The headers.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Extensions.HttpManager.HttpGetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            HTTPs the get asynchronous.
            </summary>
            <param name="url">The URL.</param>
            <param name="headers">The headers.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Quartz.IQuartzManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.GetScheduler(System.Threading.CancellationToken)">
            <summary>
            Gets the scheduler.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.Start(System.Threading.CancellationToken)">
            <summary>
            Starts the specified token.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.Shutdown(System.Threading.CancellationToken)">
            <summary>
            Shuts down this instance.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.CheckExists(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks the exists.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.AddJob``1(AIStudio.Common.Quartz.Models.JobInfo,System.Threading.CancellationToken)">
            <summary>
            Adds the job.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jobInfo">The job information.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.AddJob(System.Type,AIStudio.Common.Quartz.Models.JobInfo,System.Threading.CancellationToken)">
            <summary>
            Adds the job.
            </summary>
            <param name="jobType">Type of the job.</param>
            <param name="jobInfo">The job information.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.DeleteJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.PauseJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Pauses the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.ResumeJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Resumes the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.IQuartzManager.DoJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Does the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Quartz.JobSchedulingOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.Quartz.JobSchedulingOptions.StartHandle">
            <summary>
            定时任务启动时执行的程序
            </summary>
            <value>
            The start handle.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.JobSchedulingOptions.ShutdownHandle">
            <summary>
            定时任务关闭时执行的程序
            </summary>
            <value>
            The shutdown handle.
            </value>
        </member>
        <member name="T:AIStudio.Common.Quartz.JobSchedulingServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Quartz.JobSchedulingServiceCollectionExtensions.AddJobScheduling_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AIStudio.Common.Quartz.JobSchedulingOptions})">
            <summary>
            添加定时任务相关服务（基于 Quartz 实现）
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Quartz.Models.CustomConsoleLogProvider">
            <summary>
            
            </summary>
            <seealso cref="!:Quartz.Logging.ILogProvider" />
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.CustomConsoleLogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>
            The logger reference.
            </returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.CustomConsoleLogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>
            A disposable that when disposed removes the message from the context.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.CustomConsoleLogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens the mapped context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.CustomConsoleLogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>
            A disposable that when disposed removes the map from the context.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:AIStudio.Common.Quartz.Models.JobExcuteResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.JobExcuteResult.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AIStudio.Common.Quartz.Models.JobExcuteResult"/> is success.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.JobExcuteResult.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.JobExcuteResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Quartz.Models.JobExcuteResult"/> class.
            </summary>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:AIStudio.Common.Quartz.Models.JobInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.JobInfo.GroupName">
            <summary>
            分组
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.JobInfo.Name">
            <summary>
            名称
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.JobInfo.Triggers">
            <summary>
            触发器
            </summary>
            <value>
            The triggers.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.JobInfo.JobDataMap">
            <summary>
            任务执行入参数据
            </summary>
            <value>
            The job data map.
            </value>
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.JobInfo.#ctor(System.String,System.String,Quartz.JobDataMap)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Quartz.Models.JobInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="groupName">Name of the group.</param>
            <param name="jobDataMap">The job data map.</param>
        </member>
        <member name="T:AIStudio.Common.Quartz.Models.TriggerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.GroupName">
            <summary>
            Gets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.Cron">
            <summary>
            Gets the cron.
            </summary>
            <value>
            The cron.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.Describe">
            <summary>
            Gets the describe.
            </summary>
            <value>
            The describe.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
            <value>
            The end time.
            </value>
        </member>
        <member name="P:AIStudio.Common.Quartz.Models.TriggerInfo.LastRunTime">
            <summary>
            Gets or sets the last run time.
            </summary>
            <value>
            The last run time.
            </value>
        </member>
        <member name="M:AIStudio.Common.Quartz.Models.TriggerInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Quartz.Models.TriggerInfo" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="groupName">Name of the group.</param>
            <param name="cron">The cron.</param>
            <param name="describe">The describe.</param>
        </member>
        <member name="T:AIStudio.Common.Quartz.QuartzHostedService">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.IHostedService" />
        </member>
        <member name="F:AIStudio.Common.Quartz.QuartzHostedService._quartzManager">
            <summary>
            The quartz manager
            </summary>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzHostedService.#ctor(AIStudio.Common.Quartz.IQuartzManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Quartz.QuartzHostedService"/> class.
            </summary>
            <param name="quartzManager">The quartz manager.</param>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is ready to start the service.
            </summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            </summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        </member>
        <member name="T:AIStudio.Common.Quartz.QuartzManager">
            <summary>
            
            </summary>
            <seealso cref="T:AIStudio.Common.Quartz.IQuartzManager" />
        </member>
        <member name="F:AIStudio.Common.Quartz.QuartzManager._serviceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="F:AIStudio.Common.Quartz.QuartzManager._schedulerFactory">
            <summary>
            The scheduler factory
            </summary>
        </member>
        <member name="F:AIStudio.Common.Quartz.QuartzManager._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:AIStudio.Common.Quartz.QuartzManager._options">
            <summary>
            The options
            </summary>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.#ctor(System.IServiceProvider,Quartz.ISchedulerFactory,Microsoft.Extensions.Logging.ILogger{AIStudio.Common.Quartz.QuartzManager},Microsoft.Extensions.Options.IOptions{AIStudio.Common.Quartz.JobSchedulingOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Quartz.QuartzManager"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <param name="schedulerFactory">The scheduler factory.</param>
            <param name="logger">The logger.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.GetScheduler(System.Threading.CancellationToken)">
            <summary>
            Gets the scheduler.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.Start(System.Threading.CancellationToken)">
            <summary>
            Starts the specified token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.Shutdown(System.Threading.CancellationToken)">
            <summary>
            Shuts down this instance.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.CheckExists(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks the exists.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.AddJob``1(AIStudio.Common.Quartz.Models.JobInfo,System.Threading.CancellationToken)">
            <summary>
            Adds the job.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jobInfo">The job information.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.AddJob(System.Type,AIStudio.Common.Quartz.Models.JobInfo,System.Threading.CancellationToken)">
            <summary>
            Adds the job.
            </summary>
            <param name="jobType">Type of the job.</param>
            <param name="jobInfo">The job information.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.DeleteJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.PauseJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Pauses the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.ResumeJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Resumes the job.
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Quartz.QuartzManager.DoJob(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            立即执行一次
            </summary>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Service.ServiceLocator">
            <summary>
            本地服务
            </summary>
        </member>
        <member name="P:AIStudio.Common.Service.ServiceLocator.AppliactionServices">
            <summary>
            服务提供,单例使用这个
            </summary>
        </member>
        <member name="P:AIStudio.Common.Service.ServiceLocator.RequestServices">
            <summary>
            服务提供，Scope使用这个
            </summary>
        </member>
        <member name="P:AIStudio.Common.Service.ServiceLocator.HttpContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:AIStudio.Common.Service.ServiceLocator.User">
            <summary>
            获取请求上下文用户,只有授权访问的页面或接口才存在值，否则为 null
            </summary>
        </member>
        <member name="T:AIStudio.Common.SqlSuger.SqlSugarCache">
            <summary>
            
            </summary>
            <seealso cref="T:SqlSugar.ICacheService" />
        </member>
        <member name="F:AIStudio.Common.SqlSuger.SqlSugarCache._cache">
            <summary>
            The cache
            </summary>
        </member>
        <member name="F:AIStudio.Common.SqlSuger.SqlSugarCache._keys">
            <summary>
            The keys
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.SqlSuger.SqlSugarCache"/> class.
            </summary>
            <param name="cache">The cache.</param>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.Add``1(System.String,``0)">
            <summary>
            Adds the specified key.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.Add``1(System.String,``0,System.Int32)">
            <summary>
            Adds the specified key.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cacheDurationInSeconds">The cache duration in seconds.</param>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.ContainsKey``1(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.Get``1(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.GetAllKey``1">
            <summary>
            Gets all key.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.GetOrCreate``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            Gets the or create.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="cacheKey">The cache key.</param>
            <param name="create">The create.</param>
            <param name="cacheDurationInSeconds">The cache duration in seconds.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarCache.Remove``1(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <typeparam name="TV">The type of the v.</typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="T:AIStudio.Common.SqlSuger.SqlSugarPagedList`1">
            <summary>
            分页泛型集合
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.PageSize">
            <summary>
            页容量
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.Items">
            <summary>
            当前页集合
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.HasPrevPages">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarPagedList`1.HasNextPages">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="T:AIStudio.Common.SqlSuger.PagedModel">
            <summary>
            分页集合
            </summary>
        </member>
        <member name="T:AIStudio.Common.SqlSuger.SqlSugarRepository`1">
            <summary>
            SqlSugar 仓储实现类
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="F:AIStudio.Common.SqlSuger.SqlSugarRepository`1.UpdateIgnoreColumns">
            <summary>
            The update ignore columns
            </summary>
        </member>
        <member name="F:AIStudio.Common.SqlSuger.SqlSugarRepository`1._db">
            <summary>
            初始化 SqlSugar 客户端
            </summary>
        </member>
        <member name="F:AIStudio.Common.SqlSuger.SqlSugarRepository`1._serviceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Context">
            <summary>
            数据库上下文
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarRepository`1.EntityContext">
            <summary>
            Gets the entity context.
            </summary>
            <value>
            The entity context.
            </value>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.#ctor(SqlSugar.ISqlSugarClient,System.IServiceProvider)">
            <summary>
            构造函数
            </summary>
            <param name="db">The database.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Entities">
            <summary>
            实体集合
            </summary>
            <value>
            The entities.
            </value>
        </member>
        <member name="P:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Ado">
            <summary>
            原生 Ado 对象
            </summary>
            <value>
            The ADO.
            </value>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取总数
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Single(System.Object)">
            <summary>
            通过主键获取实体
            </summary>
            <param name="Id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取一个实体
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.ToList">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.ToList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression">The where expression.</param>
            <param name="orderByExpression">The order by expression.</param>
            <param name="orderByType">Type of the order by.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.ToListAsync">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.ToListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            获取列表
            </summary>
            <param name="whereExpression">The where expression.</param>
            <param name="orderByExpression">The order by expression.</param>
            <param name="orderByType">Type of the order by.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsInsertable(`0)">
            <summary>
            Ases the insertable.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsInsertable(`0[])">
            <summary>
            Ases the insertable.
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Insert(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Insert(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertReturnIdentity(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="insertObj">The insert object.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertReturnSnowflakeId(`0)">
            <summary>
            新增一条记录返回雪花Id
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertReturnEntity(`0)">
            <summary>
            新增一条记录返回实体
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertAsync(`0)">
            <summary>
            新增一条记录
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertAsync(`0[])">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            新增一条记录返回自增Id
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertReturnSnowflakeIdAsync(`0)">
            <summary>
            新增一条记录返回雪花Id
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.InsertReturnEntityAsync(`0)">
            <summary>
            新增一条记录返回实体
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Update(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Update(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.UpdateAsync(`0)">
            <summary>
            更新一条记录
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            更新记录
            </summary>
            <param name="predicate">更新的条件</param>
            <param name="content">更新的内容</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            更新记录
            </summary>
            <param name="predicate">更新的条件</param>
            <param name="content">更新的内容</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.UpdateAsync(`0[])">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            更新多条记录
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsUpdateable(`0)">
            <summary>
            Ases the updateable.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsUpdateable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Ases the updateable.
            </summary>
            <param name="entities">The entities.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Delete(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Delete(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Delete(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.DeleteAsync(`0)">
            <summary>
            删除一条记录
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.DeleteAsync(System.Object)">
            <summary>
            删除一条记录
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.DeleteAsync(System.Object[])">
            <summary>
            删除多条记录
            </summary>
            <param name="keys">The keys.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            自定义条件删除记录
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Where(System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式查询多条记录
            </summary>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsQueryable">
            <summary>
            构建查询分析器
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构建查询分析器
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsAsyncEnumerable">
            <summary>
            直接返回数据库结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.AsAsyncEnumerable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            直接返回数据库结果
            </summary>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.IsExists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determines whether the specified where expression is exists.
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns>
              <c>true</c> if the specified where expression is exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.IsExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Determines whether [is exists asynchronous] [the specified where expression].
            </summary>
            <param name="whereExpression">The where expression.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.Change``1">
            <summary>
            切换仓储(注意使用环境)
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns>
            仓储
            </returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.CurrentBeginTran">
            <summary>
            当前db
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.CurrentCommitTran">
            <summary>
            当前db
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.CurrentRollbackTran">
            <summary>
            当前db
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.BeginTran">
            <summary>
            所有db
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.CommitTran">
            <summary>
            所有db
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarRepository`1.RollbackTran">
            <summary>
            所有db
            </summary>
        </member>
        <member name="T:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.AddSqlSugar_(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            SqlsugarScope的配置
            Scope必须用单例注入
            不可以用Action委托注入
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.GetTenantId">
            <summary>
            获取当前租户id
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.GetTenantId(System.Object@)">
            <summary>
            获取当前租户id
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.GetUserId(System.Object@)">
            <summary>
            Gets the user identifier.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.GetUserName(System.Object@)">
            <summary>
            Gets the name of the user.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.IsSuperAdmin">
            <summary>
            判断是不是超级管理员
            </summary>
            <returns>
              <c>true</c> if [is super admin]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            测试用法
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection,SqlSugar.ConnectionConfig,System.Action{SqlSugar.ISqlSugarClient})">
            <summary>
            添加 SqlSugar 拓展
            </summary>
            <param name="services">The services.</param>
            <param name="config">The configuration.</param>
            <param name="buildAction">The build action.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlsugarServiceCollectionExtensions.AddSqlSugar(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.List{SqlSugar.ConnectionConfig},System.Action{SqlSugar.ISqlSugarClient})">
            <summary>
            添加 SqlSugar 拓展
            </summary>
            <param name="services">The services.</param>
            <param name="configs">The configs.</param>
            <param name="buildAction">The build action.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.SqlSuger.SqlSugarTenantSplitService">
            <summary>
            按TenantId进行分表
            </summary>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarTenantSplitService.GetAllTables(SqlSugar.ISqlSugarClient,SqlSugar.EntityInfo,System.Collections.Generic.List{SqlSugar.DbTableInfo})">
            <summary>
            返回数据库中所有分表
            </summary>
            <param name="db"></param>
            <param name="EntityInfo"></param>
            <param name="tableInfos"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarTenantSplitService.GetFieldValue(SqlSugar.ISqlSugarClient,SqlSugar.EntityInfo,SqlSugar.SplitType,System.Object)">
            <summary>
            获取分表字段的值
            </summary>
            <param name="db"></param>
            <param name="entityInfo"></param>
            <param name="splitType"></param>
            <param name="entityValue"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarTenantSplitService.GetTableName(SqlSugar.ISqlSugarClient,SqlSugar.EntityInfo)">
            <summary>
            默认表名
            </summary>
            <param name="db"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarTenantSplitService.GetTableName(SqlSugar.ISqlSugarClient,SqlSugar.EntityInfo,SqlSugar.SplitType)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="entityInfo"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:AIStudio.Common.SqlSuger.SqlSugarTenantSplitService.GetTableName(SqlSugar.ISqlSugarClient,SqlSugar.EntityInfo,SqlSugar.SplitType,System.Object)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="entityInfo"></param>
            <param name="splitType"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Swagger.ApiVersionInfo">
            <summary>
            api版本号
            </summary>
        </member>
        <member name="F:AIStudio.Common.Swagger.ApiVersionInfo.V1">
            <summary>
            The v1
            </summary>
        </member>
        <member name="F:AIStudio.Common.Swagger.ApiVersionInfo.V2">
            <summary>
            The v2
            </summary>
        </member>
        <member name="F:AIStudio.Common.Swagger.ApiVersionInfo.V3">
            <summary>
            The v3
            </summary>
        </member>
        <member name="F:AIStudio.Common.Swagger.ApiVersionInfo.V4">
            <summary>
            The v4
            </summary>
        </member>
        <member name="F:AIStudio.Common.Swagger.ApiVersionInfo.V5">
            <summary>
            The v5
            </summary>
        </member>
        <member name="F:AIStudio.Common.Swagger.ApiVersionInfo.Test">
            <summary>
            The test
            </summary>
        </member>
        <member name="M:AIStudio.Common.Swagger.ApiVersionInfo.GetFieldValues">
            <summary>
            Gets the field values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Swagger.SwaggerServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:AIStudio.Common.Swagger.SwaggerServiceCollectionExtensions.AddSwaggerGen_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenOptions})">
            <summary>
            SwaggerGen
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Types.GlobalConst">
            <summary>
            全局常量
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.Id">
            <summary>
            自然主键
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.Deleted">
            <summary>
            否已删除
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.CreatorId">
            <summary>
            创建人Id
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.CreatorName">
            <summary>
            创建人
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.ModifyTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.ModifyId">
            <summary>
            修改人Id
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.ModifyName">
            <summary>
            修改人
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalConst.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="T:AIStudio.Common.Types.GlobalType">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalType.AssemblyPattern">
            <summary>
            解决方案程序集匹配名
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalType.AllAssemblies">
            <summary>
            解决方案所有程序集
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalType.AllTypes">
            <summary>
            解决方案所有自定义类
            </summary>
        </member>
        <member name="F:AIStudio.Common.Types.GlobalType.PhysicDeleteTypes">
            <summary>
            框架物理删除的类
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.STANDARD_RIGHTS_REQUIRED">
            <summary>
            The standard rights required
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_WIN32_OWN_PROCESS">
            <summary>
            The service wi N32 own process
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwServiceType">
            <summary>
            The dw service type
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwCurrentState">
            <summary>
            The dw current state
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwControlsAccepted">
            <summary>
            The dw controls accepted
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwWin32ExitCode">
            <summary>
            The dw win32 exit code
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwServiceSpecificExitCode">
            <summary>
            The dw service specific exit code
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwCheckPoint">
            <summary>
            The dw check point
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS.dwWaitHint">
            <summary>
            The dw wait hint
            </summary>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.OpenSCManager(System.String,System.String,AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights)">
            <summary>
            Opens the sc manager.
            </summary>
            <param name="machineName">Name of the machine.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="dwDesiredAccess">The dw desired access.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.OpenService(System.IntPtr,System.String,AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights)">
            <summary>
            Opens the service.
            </summary>
            <param name="hSCManager">The h sc manager.</param>
            <param name="lpServiceName">Name of the lp service.</param>
            <param name="dwDesiredAccess">The dw desired access.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.CreateService(System.IntPtr,System.String,System.String,AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights,System.Int32,AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag,AIStudio.Common.WindowService.ServiceInstaller._ServiceError,System.String,System.String,System.IntPtr,System.String,System.String,System.String)">
            <summary>
            Creates the service.
            </summary>
            <param name="hSCManager">The h sc manager.</param>
            <param name="lpServiceName">Name of the lp service.</param>
            <param name="lpDisplayName">Display name of the lp.</param>
            <param name="dwDesiredAccess">The dw desired access.</param>
            <param name="dwServiceType">Type of the dw service.</param>
            <param name="dwStartType">Start type of the dw.</param>
            <param name="dwErrorControl">The dw error control.</param>
            <param name="lpBinaryPathName">Name of the lp binary path.</param>
            <param name="lpLoadOrderGroup">The lp load order group.</param>
            <param name="lpdwTagId">The LPDW tag identifier.</param>
            <param name="lpDependencies">The lp dependencies.</param>
            <param name="lp">The lp.</param>
            <param name="lpPassword">The lp password.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.CloseServiceHandle(System.IntPtr)">
            <summary>
            Closes the service handle.
            </summary>
            <param name="hSCObject">The h sc object.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.QueryServiceStatus(System.IntPtr,AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS)">
            <summary>
            Queries the service status.
            </summary>
            <param name="hService">The h service.</param>
            <param name="lpServiceStatus">The lp service status.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.DeleteService(System.IntPtr)">
            <summary>
            Deletes the service.
            </summary>
            <param name="hService">The h service.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.ControlService(System.IntPtr,AIStudio.Common.WindowService.ServiceInstaller._ServiceControl,AIStudio.Common.WindowService.ServiceInstaller.SERVICE_STATUS)">
            <summary>
            Controls the service.
            </summary>
            <param name="hService">The h service.</param>
            <param name="dwControl">The dw control.</param>
            <param name="lpServiceStatus">The lp service status.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.StartService(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Starts the service.
            </summary>
            <param name="hService">The h service.</param>
            <param name="dwNumServiceArgs">The dw number service arguments.</param>
            <param name="lpServiceArgVectors">The lp service argument vectors.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.Uninstall(System.String)">
            <summary>
            Uninstalls the specified service name.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <exception cref="T:System.ApplicationException">
            Service not installed.
            or
            Could not delete service " + Marshal.GetLastWin32Error()
            </exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.IsInstalled(System.String)">
            <summary>
            Determines whether the specified service name is installed.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>
              <c>true</c> if the specified service name is installed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.Install(System.String,System.String,System.String)">
            <summary>
            Installs the specified service name.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="displayName">The display name.</param>
            <param name="fileName">Name of the file.</param>
            <exception cref="T:System.ApplicationException">Failed to install service.</exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.StartService(System.String)">
            <summary>
            Starts the service.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <exception cref="T:System.ApplicationException">Could not open service.</exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller.StopService(System.String)">
            <summary>
            Stops the service.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <exception cref="T:System.ApplicationException">Could not open service.</exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller._StartService(System.IntPtr)">
            <summary>
            Starts the service.
            </summary>
            <param name="service">The service.</param>
            <exception cref="T:System.ApplicationException">Unable to start service</exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller._StopService(System.IntPtr)">
            <summary>
            Stops the service.
            </summary>
            <param name="service">The service.</param>
            <exception cref="T:System.ApplicationException">Unable to stop service</exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller._GetServiceStatus(System.IntPtr)">
            <summary>
            Gets the service status.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">Failed to query service status.</exception>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller._WaitForServiceStatus(System.IntPtr,AIStudio.Common.WindowService.ServiceInstaller._ServiceState,AIStudio.Common.WindowService.ServiceInstaller._ServiceState)">
            <summary>
            Waits for service status.
            </summary>
            <param name="service">The service.</param>
            <param name="waitStatus">The wait status.</param>
            <param name="desiredStatus">The desired status.</param>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.WindowService.ServiceInstaller._OpenSCManager(AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights)">
            <summary>
            Opens the sc manager.
            </summary>
            <param name="rights">The rights.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">Could not connect to service control manager.</exception>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller._ServiceState">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.NotFound">
            <summary>
            The not found
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.Stopped">
            <summary>
            The stopped
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.StartPending">
            <summary>
            The start pending
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.StopPending">
            <summary>
            The stop pending
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.Running">
            <summary>
            The running
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.ContinuePending">
            <summary>
            The continue pending
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.PausePending">
            <summary>
            The pause pending
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceState.Paused">
            <summary>
            The paused
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.Connect">
            <summary>
            The connect
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.CreateService">
            <summary>
            The create service
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.EnumerateService">
            <summary>
            The enumerate service
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.Lock">
            <summary>
            The lock
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.QueryLockStatus">
            <summary>
            The query lock status
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.ModifyBootConfig">
            <summary>
            The modify boot configuration
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.StandardRightsRequired">
            <summary>
            The standard rights required
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ScmAccessRights.AllAccess">
            <summary>
            All access
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.QueryConfig">
            <summary>
            The query configuration
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.ChangeConfig">
            <summary>
            The change configuration
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.QueryStatus">
            <summary>
            The query status
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.EnumerateDependants">
            <summary>
            The enumerate dependants
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.Stop">
            <summary>
            The stop
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.PauseContinue">
            <summary>
            The pause continue
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.Interrogate">
            <summary>
            The interrogate
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.UserDefinedControl">
            <summary>
            The user defined control
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.Delete">
            <summary>
            The delete
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.StandardRightsRequired">
            <summary>
            The standard rights required
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceAccessRights.AllAccess">
            <summary>
            All access
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag.SystemStart">
            <summary>
            The system start
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag.AutoStart">
            <summary>
            The automatic start
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag.DemandStart">
            <summary>
            The demand start
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceBootFlag.Disabled">
            <summary>
            The disabled
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.Stop">
            <summary>
            The stop
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.Pause">
            <summary>
            The pause
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.Continue">
            <summary>
            The continue
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.Interrogate">
            <summary>
            The interrogate
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.ParamChange">
            <summary>
            The parameter change
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.NetBindAdd">
            <summary>
            The net bind add
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.NetBindRemove">
            <summary>
            The net bind remove
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.NetBindEnable">
            <summary>
            The net bind enable
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceControl.NetBindDisable">
            <summary>
            The net bind disable
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.ServiceInstaller._ServiceError">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceError.Ignore">
            <summary>
            The ignore
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceError.Normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceError.Severe">
            <summary>
            The severe
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.ServiceInstaller._ServiceError.Critical">
            <summary>
            The critical
            </summary>
        </member>
        <member name="T:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller">
            <summary>
            
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.ServiceName">
            <summary>
            The service name
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.FilePath">
            <summary>
            The file path
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.Username">
            <summary>
            The username
            </summary>
        </member>
        <member name="F:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.Password">
            <summary>
            The password
            </summary>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.Run(System.String,System.String,System.String,System.String)">
            <summary>
            Runs the specified service name.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="filePath">The file path.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.InstallService(System.String)">
            <summary>
            Installs the service.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.UninstallService(System.String)">
            <summary>
            Uninstalls the service.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.StartService(System.String,System.Boolean@)">
            <summary>
            Starts the service.
            </summary>
            <param name="name">The name.</param>
            <param name="runapp">if set to <c>true</c> [runapp].</param>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.StopService(System.String)">
            <summary>
            Stops the service.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.PrintStatus(System.String)">
            <summary>
            Prints the status.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AIStudio.Common.WindowService.WindowSeviceSelfHostInstaller.PrintUsage">
            <summary>
            Prints the usage.
            </summary>
        </member>
        <member name="T:AIStudio.Common.Workflow.Middleware.AddDescriptionWorkflowMiddleware">
            <summary>
            AddDescriptionWorkflowMiddleware
            </summary>
            <seealso cref="T:WorkflowCore.Interface.IWorkflowMiddleware" />
        </member>
        <member name="P:AIStudio.Common.Workflow.Middleware.AddDescriptionWorkflowMiddleware.Phase">
            <summary>
            The phase in the workflow execution to run this middleware in
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.AddDescriptionWorkflowMiddleware.HandleAsync(WorkflowCore.Models.WorkflowInstance,WorkflowCore.Models.WorkflowDelegate)">
            <summary>
            Runs the middleware on the given <see cref="T:WorkflowCore.Models.WorkflowInstance" />.
            </summary>
            <param name="workflow">The <see cref="T:WorkflowCore.Models.WorkflowInstance" />.</param>
            <param name="next">The next middleware in the chain.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that completes asynchronously once the
            middleware chain finishes running.
            </returns>
        </member>
        <member name="T:AIStudio.Common.Workflow.Middleware.IDescriptiveWorkflowParams">
            <summary>
            IDescriptiveWorkflowParams
            </summary>
        </member>
        <member name="P:AIStudio.Common.Workflow.Middleware.IDescriptiveWorkflowParams.Description">
            <summary>
            Description
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:AIStudio.Common.Workflow.Middleware.AddMetadataToLogsMiddleware">
            <summary>
            Loosely based off this article:
            https://www.frakkingsweet.com/net-core-log-correlation-easy-access-to-headers/
            </summary>
            <seealso cref="T:WorkflowCore.Interface.IWorkflowStepMiddleware" />
        </member>
        <member name="F:AIStudio.Common.Workflow.Middleware.AddMetadataToLogsMiddleware._log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.AddMetadataToLogsMiddleware.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.Workflow.Middleware.AddMetadataToLogsMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Workflow.Middleware.AddMetadataToLogsMiddleware"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.AddMetadataToLogsMiddleware.HandleAsync(WorkflowCore.Interface.IStepExecutionContext,WorkflowCore.Interface.IStepBody,WorkflowCore.Models.WorkflowStepDelegate)">
            <summary>
            Handle the workflow step and return an <see cref="T:WorkflowCore.Models.ExecutionResult" />
            asynchronously. It is important to invoke <see cref="!:next" /> at some point
            in the middleware. Not doing so will prevent the workflow step from ever
            getting executed.
            </summary>
            <param name="context">The step's context.</param>
            <param name="body">An instance of the step body that is going to be run.</param>
            <param name="next">The next middleware in the chain.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> of the workflow result.
            </returns>
        </member>
        <member name="T:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware">
            <summary>
            
            </summary>
            <seealso cref="T:WorkflowCore.Interface.IWorkflowStepMiddleware" />
        </member>
        <member name="F:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware.StepContextKey">
            <summary>
            The step context key
            </summary>
        </member>
        <member name="F:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware.MaxRetries">
            <summary>
            The maximum retries
            </summary>
        </member>
        <member name="F:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware._log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware.GetRetryPolicy">
            <summary>
            Gets the retry policy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware.HandleAsync(WorkflowCore.Interface.IStepExecutionContext,WorkflowCore.Interface.IStepBody,WorkflowCore.Models.WorkflowStepDelegate)">
            <summary>
            Handle the workflow step and return an <see cref="T:WorkflowCore.Models.ExecutionResult" />
            asynchronously. It is important to invoke <see cref="!:next" /> at some point
            in the middleware. Not doing so will prevent the workflow step from ever
            getting executed.
            </summary>
            <param name="context">The step's context.</param>
            <param name="body">An instance of the step body that is going to be run.</param>
            <param name="next">The next middleware in the chain.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> of the workflow result.
            </returns>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.PollyRetryMiddleware.UpdateRetryCount(System.Exception,System.Int32,WorkflowCore.Interface.IStepExecutionContext)">
            <summary>
            Updates the retry count.
            </summary>
            <param name="exception">The exception.</param>
            <param name="retryCount">The retry count.</param>
            <param name="stepContext">The step context.</param>
            <returns></returns>
        </member>
        <member name="T:AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware">
            <summary>
            
            </summary>
            <seealso cref="T:WorkflowCore.Interface.IWorkflowMiddleware" />
        </member>
        <member name="F:AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware._log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware.#ctor(Microsoft.Extensions.Logging.ILogger{AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="P:AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware.Phase">
            <summary>
            The phase in the workflow execution to run this middleware in
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.Middleware.PrintWorkflowSummaryMiddleware.HandleAsync(WorkflowCore.Models.WorkflowInstance,WorkflowCore.Models.WorkflowDelegate)">
            <summary>
            Runs the middleware on the given <see cref="T:WorkflowCore.Models.WorkflowInstance" />.
            </summary>
            <param name="workflow">The <see cref="T:WorkflowCore.Models.WorkflowInstance" />.</param>
            <param name="next">The next middleware in the chain.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> that completes asynchronously once the
            middleware chain finishes running.
            </returns>
        </member>
        <member name="T:AIStudio.Common.Workflow.WorkflowHostedService">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.Extensions.Hosting.IHostedService" />
        </member>
        <member name="F:AIStudio.Common.Workflow.WorkflowHostedService._workflowHost">
            <summary>
            The workflow host
            </summary>
        </member>
        <member name="F:AIStudio.Common.Workflow.WorkflowHostedService._serviceProvider">
            <summary>
            The service provider
            </summary>
        </member>
        <member name="F:AIStudio.Common.Workflow.WorkflowHostedService._options">
            <summary>
            The options
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.WorkflowHostedService.#ctor(WorkflowCore.Interface.IWorkflowHost,System.IServiceProvider,Microsoft.Extensions.Options.IOptions{AIStudio.Common.Workflow.WorkflowSetupOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:AIStudio.Common.Workflow.WorkflowHostedService"/> class.
            </summary>
            <param name="workflowHost">The workflow host.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:AIStudio.Common.Workflow.WorkflowHostedService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is ready to start the service.
            </summary>
            <param name="cancellationToken">Indicates that the start process has been aborted.</param>
        </member>
        <member name="M:AIStudio.Common.Workflow.WorkflowHostedService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            </summary>
            <param name="cancellationToken">Indicates that the shutdown process should no longer be graceful.</param>
        </member>
        <member name="T:AIStudio.Common.Workflow.WorkflowSetupOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:AIStudio.Common.Workflow.WorkflowSetupOptions.StartHandle">
            <summary>
            工作流启动时执行的程序
            </summary>
            <value>
            The start handle.
            </value>
        </member>
        <member name="P:AIStudio.Common.Workflow.WorkflowSetupOptions.ShutdownHandle">
            <summary>
            工作流关闭时执行的程序
            </summary>
            <value>
            The shutdown handle.
            </value>
        </member>
        <member name="T:AIStudio.Common.Workflow.WorkflowServiceCollectionExtensions">
            <summary>
            WorkflowServiceCollectionExtensions
            </summary>
        </member>
        <member name="M:AIStudio.Common.Workflow.WorkflowServiceCollectionExtensions.AddWorkflow_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AIStudio.Common.Workflow.WorkflowSetupOptions})">
            <summary>
            工作流
            </summary>
            <param name="services"></param>
            <param name="setupAction"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CorsServiceCollectionExtensions.AddCors_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.Cors.Infrastructure.CorsOptions})">
            <summary>
            添加默认跨域配置
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBusCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the event bus core.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBusDefault_(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the event bus default.
            </summary>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBusLocal_(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AIStudio.Common.EventBus.Local.LocalEventBusOptions})">
            <summary>
            Adds the event bus local.
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBusRabbitMq(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AIStudio.Common.EventBus.RabbitMq.RabbitMqEventBusOptions})">
            <summary>
            Adds the event bus rabbit mq.
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EventBusServiceCollectionExtensions.AddEventBusRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AIStudio.Common.EventBus.Redis.RedisEventBusOptions})">
            <summary>
            Adds the event bus redis.
            </summary>
            <param name="services">The services.</param>
            <param name="setupAction">The setup action.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.MiddlewareApplicationBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.MiddlewareApplicationBuilderExtensions.UseMiddleware_(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Api 异常处理中间件
            </summary>
            <param name="app">The application.</param>
            <returns></returns>
        </member>
        <member name="T:Simple.Common.Filters.ExceptionFilter">
            <summary>
            异常过滤器
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute" />
        </member>
        <member name="M:Simple.Common.Filters.ExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            </summary>
            <param name="context"></param>
            <inheritdoc />
        </member>
        <member name="M:Simple.Common.Filters.ExceptionFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            </summary>
            <param name="context"></param>
            <returns></returns>
            <inheritdoc />
        </member>
        <member name="T:Simple.Common.Filters.RequestActionFilter">
            <summary>
            
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter" />
        </member>
        <member name="F:Simple.Common.Filters.RequestActionFilter._publisher">
            <summary>
            The publisher
            </summary>
        </member>
        <member name="F:Simple.Common.Filters.RequestActionFilter._operator">
            <summary>
            The operator
            </summary>
        </member>
        <member name="P:Simple.Common.Filters.RequestActionFilter.Order">
            <summary>
            Gets the order value for determining the order of execution of filters. Filters execute in
            ascending numeric value of the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> property.
            </summary>
            <remarks>
            <para>
            Filters are executed in an ordering determined by an ascending sort of the <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> property.
            </para>
            <para>
            Asynchronous filters, such as <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter" />, surround the execution of subsequent
            filters of the same filter kind. An asynchronous filter with a lower numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
            value will have its filter method, such as <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IAsyncActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)" />,
            executed before that of a filter with a higher value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />.
            </para>
            <para>
            Synchronous filters, such as <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IActionFilter" />, have a before-method, such as
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)" />, and an after-method, such as
            <see cref="M:Microsoft.AspNetCore.Mvc.Filters.IActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)" />. A synchronous filter with a lower numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />
            value will have its before-method executed before that of a filter with a higher value of
            <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />. During the after-stage of the filter, a synchronous filter with a lower
            numeric <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" /> value will have its after-method executed after that of a filter with a higher
            value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />.
            </para>
            <para>
            If two filters have the same numeric value of <see cref="P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order" />, then their relative execution order
            is determined by the filter scope.
            </para>
            </remarks>
        </member>
        <member name="M:Simple.Common.Filters.RequestActionFilter.#ctor(AIStudio.Common.EventBus.Abstract.IEventPublisher,AIStudio.Common.CurrentUser.IOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Simple.Common.Filters.RequestActionFilter"/> class.
            </summary>
            <param name="publisher">The publisher.</param>
            <param name="operator">The operator.</param>
        </member>
        <member name="M:Simple.Common.Filters.RequestActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Called asynchronously before the action, after model binding is complete.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext" />.</param>
            <param name="next">The <see cref="T:Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate" />. Invoked to execute the next action filter or the action itself.</param>
        </member>
        <member name="T:Simple.Common.AjaxResultException">
            <summary>
            返回统一结果的异常
            </summary>
            <seealso cref="T:System.Exception" />
            <seealso cref="T:System.Exception" />
        </member>
        <member name="P:Simple.Common.AjaxResultException.AjaxResult">
            <summary>
            结果信息
            </summary>
            <value>
            The ajax result.
            </value>
        </member>
        <member name="P:Simple.Common.AjaxResultException.SourceException">
            <summary>
            源异常
            </summary>
            <value>
            The source exception.
            </value>
        </member>
        <member name="M:Simple.Common.AjaxResultException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Simple.Common.AjaxResultException"/> class.
            </summary>
        </member>
        <member name="M:Simple.Common.AjaxResultException.#ctor(AIStudio.Util.Common.AjaxResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Simple.Common.AjaxResultException"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Simple.Common.AjaxResultException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simple.Common.AjaxResultException"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Simple.Common.AjaxResultException.#ctor(AIStudio.Util.Common.AjaxResult,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Simple.Common.AjaxResultException"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status200OK(System.String,System.Object)">
            <summary>
            Status200s the ok.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status400BadRequest(System.String,System.Object)">
            <summary>
            Status400s the bad request.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status401Unauthorized(System.String,System.Object)">
            <summary>
            Status401s the unauthorized.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status403Forbidden(System.String,System.Object)">
            <summary>
            Status403s the forbidden.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status404NotFound(System.String,System.Object)">
            <summary>
            Status404s the not found.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status409Conflict(System.String,System.Object)">
            <summary>
            Status409s the conflict.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Simple.Common.AjaxResultException.Status500InternalServerError(System.String,System.Object)">
            <summary>
            Status500s the internal server error.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Simple.Common.Middlewares.ApiExceptionMiddleware">
            <summary>
            
            </summary>
        </member>
        <member name="F:Simple.Common.Middlewares.ApiExceptionMiddleware._next">
            <summary>
            The next
            </summary>
        </member>
        <member name="F:Simple.Common.Middlewares.ApiExceptionMiddleware._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Simple.Common.Middlewares.ApiExceptionMiddleware._publisher">
            <summary>
            The publisher
            </summary>
        </member>
        <member name="M:Simple.Common.Middlewares.ApiExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Simple.Common.Middlewares.ApiExceptionMiddleware},AIStudio.Common.EventBus.Abstract.IEventPublisher)">
            <summary>
            Initializes a new instance of the <see cref="T:Simple.Common.Middlewares.ApiExceptionMiddleware" /> class.
            </summary>
            <param name="next">The next.</param>
            <param name="logger">The logger.</param>
            <param name="publisher">The publisher.</param>
        </member>
        <member name="M:Simple.Common.Middlewares.ApiExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the asynchronous.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Simple.Common.Middlewares.ApiExceptionMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Runtime.ExceptionServices.ExceptionDispatchInfo)">
            <summary>
            Handles the exception asynchronous.
            </summary>
            <param name="context">The context.</param>
            <param name="edi">The edi.</param>
        </member>
        <member name="M:Simple.Common.Middlewares.ApiExceptionMiddleware.PublishEventAsync(System.Exception,System.String,System.String,System.String)">
            <summary>
            发布异常事件
            </summary>
            <param name="exception">异常</param>
            <param name="userName">Name of the user.</param>
            <param name="userId">操作人账号</param>
            <param name="tenantId">The tenant identifier.</param>
            <returns>
            事件Id
            </returns>
        </member>
    </members>
</doc>
